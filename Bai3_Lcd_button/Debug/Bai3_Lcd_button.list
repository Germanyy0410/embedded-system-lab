
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005648  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fbc  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800878c  0800878c  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008794  08008794  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800879c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          00000260  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e41  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df3  00000000  00000000  00033ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00036c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  00037b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022aa2  00000000  00000000  000388f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ab2  00000000  00000000  0005b392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd2ce  00000000  00000000  0006de44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013b112  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d64  00000000  00000000  0013b168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057b8 	.word	0x080057b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	080057b8 	.word	0x080057b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <button_init+0x14>)
 8000ca6:	f002 feff 	bl	8003aa8 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <button_Scan+0xc8>)
 8000cc0:	f002 fef2 	bl	8003aa8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	482c      	ldr	r0, [pc, #176]	; (8000d7c <button_Scan+0xc8>)
 8000cca:	f002 feed 	bl	8003aa8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000cce:	230a      	movs	r3, #10
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	492b      	ldr	r1, [pc, #172]	; (8000d80 <button_Scan+0xcc>)
 8000cd4:	482b      	ldr	r0, [pc, #172]	; (8000d84 <button_Scan+0xd0>)
 8000cd6:	f003 fbca 	bl	800446e <HAL_SPI_Receive>
	  int button_index = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	e03f      	b.n	8000d6a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db06      	blt.n	8000cfe <button_Scan+0x4a>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	dc03      	bgt.n	8000cfe <button_Scan+0x4a>
			  button_index = i + 4;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e018      	b.n	8000d30 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dd07      	ble.n	8000d14 <button_Scan+0x60>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	dc04      	bgt.n	8000d14 <button_Scan+0x60>
			  button_index = 7 - i;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f1c3 0307 	rsb	r3, r3, #7
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00d      	b.n	8000d30 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	dd06      	ble.n	8000d28 <button_Scan+0x74>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0b      	cmp	r3, #11
 8000d1e:	dc03      	bgt.n	8000d28 <button_Scan+0x74>
			  button_index = i + 4;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3304      	adds	r3, #4
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e003      	b.n	8000d30 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f1c3 0317 	rsb	r3, r3, #23
 8000d2e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <button_Scan+0xcc>)
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	897b      	ldrh	r3, [r7, #10]
 8000d36:	4013      	ands	r3, r2
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <button_Scan+0x96>
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <button_Scan+0xd4>)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2100      	movs	r1, #0
 8000d44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d48:	e009      	b.n	8000d5e <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <button_Scan+0xd4>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d52:	3301      	adds	r3, #1
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <button_Scan+0xd4>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000d5e:	897b      	ldrh	r3, [r7, #10]
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	ddbc      	ble.n	8000cea <button_Scan+0x36>
	  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	2000004c 	.word	0x2000004c
 8000d84:	200001ec 	.word	0x200001ec
 8000d88:	20000058 	.word	0x20000058

08000d8c <is_button_pressed>:
  * @brief  check button "id" is pressed
  * @param  id - id of button [0...15]
  * @retval 1: button is pressed
  * 		0: invalid para OR button is not pressed
  */
bool is_button_pressed(uint8_t id){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	if(id > 16) return 0;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d901      	bls.n	8000da0 <is_button_pressed+0x14>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e008      	b.n	8000db2 <is_button_pressed+0x26>
	return button_count[id] == 1;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <is_button_pressed+0x34>)
 8000da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000058 	.word	0x20000058

08000dc4 <is_button_long_pressed>:
  * @brief  check button "id" is pressed
  * @param  id - id of button [0...15]
  * @retval 1: button is long pressed
  * 		0: invalid para OR button is not long pressed
  */
bool is_button_long_pressed(uint8_t id){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	if(id > 16) return 0;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d901      	bls.n	8000dd8 <is_button_long_pressed+0x14>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e00a      	b.n	8000dee <is_button_long_pressed+0x2a>
	if(button_count[id] < time_value){
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <is_button_long_pressed+0x38>)
 8000ddc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <is_button_long_pressed+0x3c>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d201      	bcs.n	8000dec <is_button_long_pressed+0x28>
		return 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e000      	b.n	8000dee <is_button_long_pressed+0x2a>
	}
	return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000058 	.word	0x20000058
 8000e00:	20000000 	.word	0x20000000

08000e04 <fsm_led>:


/*@brief:	state machine to blink led in 2Hz
 * @para:	none
 * @retval:	none*/
void fsm_led(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	switch (led_st) {
 8000e08:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <fsm_led+0xd0>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <fsm_led+0x12>
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d041      	beq.n	8000e98 <fsm_led+0x94>
		if (!is_timer_on(3)) {
			led_st = ON;
			set_timer(3, TOGGLE_TIME);
		}
	}
}
 8000e14:	e05b      	b.n	8000ece <fsm_led+0xca>
		switch (light_st) {
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <fsm_led+0xd4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d020      	beq.n	8000e60 <fsm_led+0x5c>
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	dc2b      	bgt.n	8000e7a <fsm_led+0x76>
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d002      	beq.n	8000e2c <fsm_led+0x28>
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d00d      	beq.n	8000e46 <fsm_led+0x42>
			break;
 8000e2a:	e026      	b.n	8000e7a <fsm_led+0x76>
			control_traffic_light(0, 1, 0, 0);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	2000      	movs	r0, #0
 8000e34:	f001 febc 	bl	8002bb0 <control_traffic_light>
			control_traffic_light(1, 1, 0, 0);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f001 feb6 	bl	8002bb0 <control_traffic_light>
			break;
 8000e44:	e01a      	b.n	8000e7c <fsm_led+0x78>
			control_traffic_light(0, 0, 1, 0);
 8000e46:	2300      	movs	r3, #0
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f001 feaf 	bl	8002bb0 <control_traffic_light>
			control_traffic_light(1, 0, 1, 0);
 8000e52:	2300      	movs	r3, #0
 8000e54:	2201      	movs	r2, #1
 8000e56:	2100      	movs	r1, #0
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f001 fea9 	bl	8002bb0 <control_traffic_light>
			break;
 8000e5e:	e00d      	b.n	8000e7c <fsm_led+0x78>
			control_traffic_light(0, 0, 0, 1);
 8000e60:	2301      	movs	r3, #1
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2000      	movs	r0, #0
 8000e68:	f001 fea2 	bl	8002bb0 <control_traffic_light>
			control_traffic_light(1, 0, 0, 1);
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2001      	movs	r0, #1
 8000e74:	f001 fe9c 	bl	8002bb0 <control_traffic_light>
			break;
 8000e78:	e000      	b.n	8000e7c <fsm_led+0x78>
			break;
 8000e7a:	bf00      	nop
		if (!is_timer_on(3)) {
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f002 f931 	bl	80030e4 <is_timer_on>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d121      	bne.n	8000ecc <fsm_led+0xc8>
			led_st = OFF;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <fsm_led+0xd0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
			set_timer(3, TOGGLE_TIME);
 8000e8e:	21fa      	movs	r1, #250	; 0xfa
 8000e90:	2003      	movs	r0, #3
 8000e92:	f002 f8c9 	bl	8003028 <set_timer>
		break;
 8000e96:	e019      	b.n	8000ecc <fsm_led+0xc8>
		control_traffic_light(0, 0, 0, 0);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f001 fe86 	bl	8002bb0 <control_traffic_light>
		control_traffic_light(1, 0, 0, 0);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f001 fe80 	bl	8002bb0 <control_traffic_light>
		if (!is_timer_on(3)) {
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f002 f917 	bl	80030e4 <is_timer_on>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d108      	bne.n	8000ece <fsm_led+0xca>
			led_st = ON;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <fsm_led+0xd0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
			set_timer(3, TOGGLE_TIME);
 8000ec2:	21fa      	movs	r1, #250	; 0xfa
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f002 f8af 	bl	8003028 <set_timer>
}
 8000eca:	e000      	b.n	8000ece <fsm_led+0xca>
		break;
 8000ecc:	bf00      	nop
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000078 	.word	0x20000078
 8000ed8:	2000004e 	.word	0x2000004e

08000edc <increase_value>:
/**
 * @brief  increase the time value based-on previous state (short-pressed)
 * @param  None
 * @retval None
 */
void increase_value(void) {
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	if (light_pre_st == RED_ADJUSTMENT) {
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <increase_value+0x74>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10c      	bne.n	8000f02 <increase_value+0x26>
		red_time_buffer++;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <increase_value+0x78>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <increase_value+0x78>)
 8000ef0:	6013      	str	r3, [r2, #0]
		if (red_time_buffer >= 100) {
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <increase_value+0x78>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b63      	cmp	r3, #99	; 0x63
 8000ef8:	d924      	bls.n	8000f44 <increase_value+0x68>
			red_time_buffer = 0;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <increase_value+0x78>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
		green_time_buffer++;
		if (green_time_buffer >= 100) {
			green_time_buffer = 0;
		}
	}
}
 8000f00:	e020      	b.n	8000f44 <increase_value+0x68>
	} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <increase_value+0x74>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d10c      	bne.n	8000f24 <increase_value+0x48>
		yellow_time_buffer++;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <increase_value+0x7c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <increase_value+0x7c>)
 8000f12:	6013      	str	r3, [r2, #0]
		if (yellow_time_buffer >= 100) {
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <increase_value+0x7c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b63      	cmp	r3, #99	; 0x63
 8000f1a:	d913      	bls.n	8000f44 <increase_value+0x68>
			yellow_time_buffer = 0;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <increase_value+0x7c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
}
 8000f22:	e00f      	b.n	8000f44 <increase_value+0x68>
	} else if (light_pre_st == GREEN_ADJUSTMENT) {
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <increase_value+0x74>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d10b      	bne.n	8000f44 <increase_value+0x68>
		green_time_buffer++;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <increase_value+0x80>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <increase_value+0x80>)
 8000f34:	6013      	str	r3, [r2, #0]
		if (green_time_buffer >= 100) {
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <increase_value+0x80>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b63      	cmp	r3, #99	; 0x63
 8000f3c:	d902      	bls.n	8000f44 <increase_value+0x68>
			green_time_buffer = 0;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <increase_value+0x80>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000004f 	.word	0x2000004f
 8000f54:	20000010 	.word	0x20000010
 8000f58:	20000018 	.word	0x20000018
 8000f5c:	20000014 	.word	0x20000014

08000f60 <button0_fsm>:
 * @brief:	mode button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button0_fsm(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	switch (button_st[0]) {
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <button0_fsm+0xa4>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <button0_fsm+0x12>
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d036      	beq.n	8000fde <button0_fsm+0x7e>
 8000f70:	e041      	b.n	8000ff6 <button0_fsm+0x96>
	case release:
		if (is_button_pressed(0) == 1) {
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff ff0a 	bl	8000d8c <is_button_pressed>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d127      	bne.n	8000fce <button0_fsm+0x6e>
			// to do
			light_pre_st = light_st;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <button0_fsm+0xa8>)
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <button0_fsm+0xac>)
 8000f84:	701a      	strb	r2, [r3, #0]
			switch (light_st) {
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <button0_fsm+0xa8>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d81a      	bhi.n	8000fc4 <button0_fsm+0x64>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <button0_fsm+0x34>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08000fa5 	.word	0x08000fa5
 8000f98:	08000fad 	.word	0x08000fad
 8000f9c:	08000fb5 	.word	0x08000fb5
 8000fa0:	08000fbd 	.word	0x08000fbd
			case TRAFFIC_LIGHT:
				light_st = RED_ADJUSTMENT;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <button0_fsm+0xa8>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
				break;
 8000faa:	e00c      	b.n	8000fc6 <button0_fsm+0x66>
			case RED_ADJUSTMENT:
				light_st = YELLOW_ADJUSTMENT;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <button0_fsm+0xa8>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
				break;
 8000fb2:	e008      	b.n	8000fc6 <button0_fsm+0x66>
			case YELLOW_ADJUSTMENT:
				light_st = GREEN_ADJUSTMENT;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <button0_fsm+0xa8>)
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	701a      	strb	r2, [r3, #0]
				break;
 8000fba:	e004      	b.n	8000fc6 <button0_fsm+0x66>
			case GREEN_ADJUSTMENT:
				light_st = TRAFFIC_LIGHT;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <button0_fsm+0xa8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
				break;
 8000fc2:	e000      	b.n	8000fc6 <button0_fsm+0x66>
			default:
				break;
 8000fc4:	bf00      	nop
			}
			button_st[0] = pressed;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <button0_fsm+0xa4>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
		} else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 8000fcc:	e015      	b.n	8000ffa <button0_fsm+0x9a>
		} else if (is_button_pressed(0) == ERROR)
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff fedc 	bl	8000d8c <is_button_pressed>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d10f      	bne.n	8000ffa <button0_fsm+0x9a>
			return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e00f      	b.n	8000ffe <button0_fsm+0x9e>
	case pressed:
		if (!is_button_pressed(0)) {
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fed4 	bl	8000d8c <is_button_pressed>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <button0_fsm+0x92>
			button_st[0] = release;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <button0_fsm+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
		} else {
			return 0;
		}
		break;
 8000ff0:	e004      	b.n	8000ffc <button0_fsm+0x9c>
			return 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e003      	b.n	8000ffe <button0_fsm+0x9e>
	default:
		return 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e001      	b.n	8000ffe <button0_fsm+0x9e>
		break;
 8000ffa:	bf00      	nop
	}
	return 1;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000007c 	.word	0x2000007c
 8001008:	2000004e 	.word	0x2000004e
 800100c:	2000004f 	.word	0x2000004f

08001010 <button1_fsm>:
 * @brief:	increasing-value button fsm - 3 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button1_fsm(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	switch (button_st[1]) {
 8001014:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <button1_fsm+0xc0>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d035      	beq.n	8001088 <button1_fsm+0x78>
 800101c:	2b02      	cmp	r3, #2
 800101e:	dc4f      	bgt.n	80010c0 <button1_fsm+0xb0>
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <button1_fsm+0x1a>
 8001024:	2b01      	cmp	r3, #1
 8001026:	d019      	beq.n	800105c <button1_fsm+0x4c>
 8001028:	e04a      	b.n	80010c0 <button1_fsm+0xb0>
	case release:
		if (is_button_pressed(1) == 1) {
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff feae 	bl	8000d8c <is_button_pressed>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d10a      	bne.n	800104c <button1_fsm+0x3c>
			light_pre_st = light_st;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <button1_fsm+0xc4>)
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <button1_fsm+0xc8>)
 800103c:	701a      	strb	r2, [r3, #0]
			light_st = INCREASE_BY_1;
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <button1_fsm+0xc4>)
 8001040:	2205      	movs	r2, #5
 8001042:	701a      	strb	r2, [r3, #0]
			button_st[1] = pressed;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <button1_fsm+0xc0>)
 8001046:	2201      	movs	r2, #1
 8001048:	705a      	strb	r2, [r3, #1]
		} else if (is_button_pressed(1) == ERROR)
			return 0;
		break;
 800104a:	e03b      	b.n	80010c4 <button1_fsm+0xb4>
		} else if (is_button_pressed(1) == ERROR)
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff fe9d 	bl	8000d8c <is_button_pressed>
 8001052:	4603      	mov	r3, r0
 8001054:	2bff      	cmp	r3, #255	; 0xff
 8001056:	d135      	bne.n	80010c4 <button1_fsm+0xb4>
			return 0;
 8001058:	2300      	movs	r3, #0
 800105a:	e037      	b.n	80010cc <button1_fsm+0xbc>
	case pressed:
		if (!is_button_pressed(1)) {
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fe95 	bl	8000d8c <is_button_pressed>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d103      	bne.n	8001070 <button1_fsm+0x60>
			button_st[1] = release;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <button1_fsm+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	705a      	strb	r2, [r3, #1]
		} else if (is_button_long_pressed(1) == 1) {
			button_st[1] = long_pressed;
		} else {
			return 0;
		}
		break;
 800106e:	e02c      	b.n	80010ca <button1_fsm+0xba>
		} else if (is_button_long_pressed(1) == 1) {
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff fea7 	bl	8000dc4 <is_button_long_pressed>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d103      	bne.n	8001084 <button1_fsm+0x74>
			button_st[1] = long_pressed;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <button1_fsm+0xc0>)
 800107e:	2202      	movs	r2, #2
 8001080:	705a      	strb	r2, [r3, #1]
		break;
 8001082:	e022      	b.n	80010ca <button1_fsm+0xba>
			return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e021      	b.n	80010cc <button1_fsm+0xbc>
	case long_pressed:
		if (light_st != INCREASE_BY_1_OVER_TIME) {
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <button1_fsm+0xc4>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b06      	cmp	r3, #6
 800108e:	d006      	beq.n	800109e <button1_fsm+0x8e>
			light_pre_st = light_st;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <button1_fsm+0xc4>)
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <button1_fsm+0xc8>)
 8001096:	701a      	strb	r2, [r3, #0]
			light_st = INCREASE_BY_1_OVER_TIME;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <button1_fsm+0xc4>)
 800109a:	2206      	movs	r2, #6
 800109c:	701a      	strb	r2, [r3, #0]
		}
		if (!is_button_pressed(1)) {
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff fe74 	bl	8000d8c <is_button_pressed>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10e      	bne.n	80010c8 <button1_fsm+0xb8>
			light_st = light_pre_st;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <button1_fsm+0xc8>)
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <button1_fsm+0xc4>)
 80010b0:	701a      	strb	r2, [r3, #0]
			light_pre_st = INCREASE_BY_1_OVER_TIME;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <button1_fsm+0xc8>)
 80010b4:	2206      	movs	r2, #6
 80010b6:	701a      	strb	r2, [r3, #0]
			button_st[1] = release;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <button1_fsm+0xc0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	705a      	strb	r2, [r3, #1]
		}
		break;
 80010be:	e003      	b.n	80010c8 <button1_fsm+0xb8>
	default:
		return 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e003      	b.n	80010cc <button1_fsm+0xbc>
		break;
 80010c4:	bf00      	nop
 80010c6:	e000      	b.n	80010ca <button1_fsm+0xba>
		break;
 80010c8:	bf00      	nop
		break;
	}
	return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000007c 	.word	0x2000007c
 80010d4:	2000004e 	.word	0x2000004e
 80010d8:	2000004f 	.word	0x2000004f

080010dc <button2_fsm>:
 * @brief:	setting-value button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button2_fsm(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	switch (button_st[2]) {
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <button2_fsm+0x68>)
 80010e2:	789b      	ldrb	r3, [r3, #2]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <button2_fsm+0x12>
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d019      	beq.n	8001120 <button2_fsm+0x44>
 80010ec:	e024      	b.n	8001138 <button2_fsm+0x5c>
	case release:
		if (is_button_pressed(2) == 1) {
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff fe4c 	bl	8000d8c <is_button_pressed>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10a      	bne.n	8001110 <button2_fsm+0x34>
			// to do
			light_pre_st = light_st;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <button2_fsm+0x6c>)
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <button2_fsm+0x70>)
 8001100:	701a      	strb	r2, [r3, #0]
			light_st = SET_VALUE;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <button2_fsm+0x6c>)
 8001104:	2204      	movs	r2, #4
 8001106:	701a      	strb	r2, [r3, #0]
			button_st[2] = pressed;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <button2_fsm+0x68>)
 800110a:	2201      	movs	r2, #1
 800110c:	709a      	strb	r2, [r3, #2]
		} else if (is_button_pressed(2) == ERROR)
			return 0;
		break;
 800110e:	e015      	b.n	800113c <button2_fsm+0x60>
		} else if (is_button_pressed(2) == ERROR)
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff fe3b 	bl	8000d8c <is_button_pressed>
 8001116:	4603      	mov	r3, r0
 8001118:	2bff      	cmp	r3, #255	; 0xff
 800111a:	d10f      	bne.n	800113c <button2_fsm+0x60>
			return 0;
 800111c:	2300      	movs	r3, #0
 800111e:	e00f      	b.n	8001140 <button2_fsm+0x64>
	case pressed:
		if (!is_button_pressed(2)) {
 8001120:	2002      	movs	r0, #2
 8001122:	f7ff fe33 	bl	8000d8c <is_button_pressed>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d103      	bne.n	8001134 <button2_fsm+0x58>
			button_st[2] = release;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <button2_fsm+0x68>)
 800112e:	2200      	movs	r2, #0
 8001130:	709a      	strb	r2, [r3, #2]
		} else {
			return 0;
		}
		break;
 8001132:	e004      	b.n	800113e <button2_fsm+0x62>
			return 0;
 8001134:	2300      	movs	r3, #0
 8001136:	e003      	b.n	8001140 <button2_fsm+0x64>
	default:
		return 0;
 8001138:	2300      	movs	r3, #0
 800113a:	e001      	b.n	8001140 <button2_fsm+0x64>
		break;
 800113c:	bf00      	nop
		break;
	}
	return 1;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000007c 	.word	0x2000007c
 8001148:	2000004e 	.word	0x2000004e
 800114c:	2000004f 	.word	0x2000004f

08001150 <traffic_light_fsm>:

/*
 * @brief: 	finite state machine to control behavior of traffic light
 * @para:	none
 * @retval:	none*/
void traffic_light_fsm(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	update_led_buf(traffic_light_timer1, traffic_light_timer2, 1);
 8001154:	4b45      	ldr	r3, [pc, #276]	; (800126c <traffic_light_fsm+0x11c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a45      	ldr	r2, [pc, #276]	; (8001270 <traffic_light_fsm+0x120>)
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	2201      	movs	r2, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fde4 	bl	8002d2c <update_led_buf>
	switch (tl_st) {
 8001164:	4b43      	ldr	r3, [pc, #268]	; (8001274 <traffic_light_fsm+0x124>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d873      	bhi.n	8001254 <traffic_light_fsm+0x104>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <traffic_light_fsm+0x24>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001185 	.word	0x08001185
 8001178:	080011b5 	.word	0x080011b5
 800117c:	080011ed 	.word	0x080011ed
 8001180:	0800121d 	.word	0x0800121d
	case RED_GREEN:
		control_traffic_light(0, 1, 0, 0);
 8001184:	2300      	movs	r3, #0
 8001186:	2200      	movs	r2, #0
 8001188:	2101      	movs	r1, #1
 800118a:	2000      	movs	r0, #0
 800118c:	f001 fd10 	bl	8002bb0 <control_traffic_light>
		control_traffic_light(1, 0, 0, 1);
 8001190:	2301      	movs	r3, #1
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2001      	movs	r0, #1
 8001198:	f001 fd0a 	bl	8002bb0 <control_traffic_light>
		if (traffic_light_timer2 <= 0) {
 800119c:	4b34      	ldr	r3, [pc, #208]	; (8001270 <traffic_light_fsm+0x120>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d159      	bne.n	8001258 <traffic_light_fsm+0x108>
			traffic_light_timer2 = yellow_time;
 80011a4:	4b34      	ldr	r3, [pc, #208]	; (8001278 <traffic_light_fsm+0x128>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a31      	ldr	r2, [pc, #196]	; (8001270 <traffic_light_fsm+0x120>)
 80011aa:	6013      	str	r3, [r2, #0]
			tl_st = RED_YELLOW;
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <traffic_light_fsm+0x124>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80011b2:	e051      	b.n	8001258 <traffic_light_fsm+0x108>
	case RED_YELLOW:
		control_traffic_light(0, 1, 0, 0);
 80011b4:	2300      	movs	r3, #0
 80011b6:	2200      	movs	r2, #0
 80011b8:	2101      	movs	r1, #1
 80011ba:	2000      	movs	r0, #0
 80011bc:	f001 fcf8 	bl	8002bb0 <control_traffic_light>
		control_traffic_light(1, 0, 1, 0);
 80011c0:	2300      	movs	r3, #0
 80011c2:	2201      	movs	r2, #1
 80011c4:	2100      	movs	r1, #0
 80011c6:	2001      	movs	r0, #1
 80011c8:	f001 fcf2 	bl	8002bb0 <control_traffic_light>
		if (traffic_light_timer2 <= 0) {
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <traffic_light_fsm+0x120>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d143      	bne.n	800125c <traffic_light_fsm+0x10c>
			traffic_light_timer1 = green_time;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <traffic_light_fsm+0x12c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a24      	ldr	r2, [pc, #144]	; (800126c <traffic_light_fsm+0x11c>)
 80011da:	6013      	str	r3, [r2, #0]
			traffic_light_timer2 = red_time;
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <traffic_light_fsm+0x130>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a23      	ldr	r2, [pc, #140]	; (8001270 <traffic_light_fsm+0x120>)
 80011e2:	6013      	str	r3, [r2, #0]
			tl_st = GREEN_RED;
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <traffic_light_fsm+0x124>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80011ea:	e037      	b.n	800125c <traffic_light_fsm+0x10c>
	case GREEN_RED:
		control_traffic_light(0, 0, 0, 1);
 80011ec:	2301      	movs	r3, #1
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2000      	movs	r0, #0
 80011f4:	f001 fcdc 	bl	8002bb0 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2101      	movs	r1, #1
 80011fe:	2001      	movs	r0, #1
 8001200:	f001 fcd6 	bl	8002bb0 <control_traffic_light>
		if (traffic_light_timer1 <= 0) {
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <traffic_light_fsm+0x11c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d129      	bne.n	8001260 <traffic_light_fsm+0x110>
			traffic_light_timer1 = yellow_time;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <traffic_light_fsm+0x128>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a16      	ldr	r2, [pc, #88]	; (800126c <traffic_light_fsm+0x11c>)
 8001212:	6013      	str	r3, [r2, #0]
			tl_st = YELLOW_RED;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <traffic_light_fsm+0x124>)
 8001216:	2203      	movs	r2, #3
 8001218:	701a      	strb	r2, [r3, #0]
		}
		break;
 800121a:	e021      	b.n	8001260 <traffic_light_fsm+0x110>
	case YELLOW_RED:
		control_traffic_light(0, 0, 1, 0);
 800121c:	2300      	movs	r3, #0
 800121e:	2201      	movs	r2, #1
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f001 fcc4 	bl	8002bb0 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 8001228:	2300      	movs	r3, #0
 800122a:	2200      	movs	r2, #0
 800122c:	2101      	movs	r1, #1
 800122e:	2001      	movs	r0, #1
 8001230:	f001 fcbe 	bl	8002bb0 <control_traffic_light>
		if (traffic_light_timer1 <= 0) {
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <traffic_light_fsm+0x11c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d113      	bne.n	8001264 <traffic_light_fsm+0x114>
			traffic_light_timer1 = red_time;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <traffic_light_fsm+0x130>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <traffic_light_fsm+0x11c>)
 8001242:	6013      	str	r3, [r2, #0]
			traffic_light_timer2 = green_time;
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <traffic_light_fsm+0x12c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a09      	ldr	r2, [pc, #36]	; (8001270 <traffic_light_fsm+0x120>)
 800124a:	6013      	str	r3, [r2, #0]
			tl_st = RED_GREEN;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <traffic_light_fsm+0x124>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001252:	e007      	b.n	8001264 <traffic_light_fsm+0x114>
	default:
		break;
 8001254:	bf00      	nop
 8001256:	e006      	b.n	8001266 <traffic_light_fsm+0x116>
		break;
 8001258:	bf00      	nop
 800125a:	e004      	b.n	8001266 <traffic_light_fsm+0x116>
		break;
 800125c:	bf00      	nop
 800125e:	e002      	b.n	8001266 <traffic_light_fsm+0x116>
		break;
 8001260:	bf00      	nop
 8001262:	e000      	b.n	8001266 <traffic_light_fsm+0x116>
		break;
 8001264:	bf00      	nop
	}
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000001c 	.word	0x2000001c
 8001270:	20000020 	.word	0x20000020
 8001274:	20000050 	.word	0x20000050
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <traffic_run>:
/*
 * @brief  Top-layer finite state machine
 * @param  None
 * @retval None
 */
void traffic_run(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af04      	add	r7, sp, #16
	switch (light_st) {
 800128a:	4ba8      	ldr	r3, [pc, #672]	; (800152c <traffic_run+0x2a8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b06      	cmp	r3, #6
 8001290:	f200 8146 	bhi.w	8001520 <traffic_run+0x29c>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <traffic_run+0x18>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012b9 	.word	0x080012b9
 80012a0:	08001399 	.word	0x08001399
 80012a4:	080013db 	.word	0x080013db
 80012a8:	0800141d 	.word	0x0800141d
 80012ac:	0800145f 	.word	0x0800145f
 80012b0:	080014a3 	.word	0x080014a3
 80012b4:	080014b7 	.word	0x080014b7
	case TRAFFIC_LIGHT:
		if (red_time != green_time + yellow_time) {
 80012b8:	4b9d      	ldr	r3, [pc, #628]	; (8001530 <traffic_run+0x2ac>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b9d      	ldr	r3, [pc, #628]	; (8001534 <traffic_run+0x2b0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	441a      	add	r2, r3
 80012c2:	4b9d      	ldr	r3, [pc, #628]	; (8001538 <traffic_run+0x2b4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d028      	beq.n	800131c <traffic_run+0x98>
			//off all leds
			control_traffic_light(0, 0, 0, 0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f001 fc6d 	bl	8002bb0 <control_traffic_light>
			control_traffic_light(1, 0, 0, 0);
 80012d6:	2300      	movs	r3, #0
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2001      	movs	r0, #1
 80012de:	f001 fc67 	bl	8002bb0 <control_traffic_light>
			lcd_ShowStr(40, 130, "SYSTEM", RED, WHITE, 32, 1);
 80012e2:	2301      	movs	r3, #1
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2320      	movs	r3, #32
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012f4:	4a91      	ldr	r2, [pc, #580]	; (800153c <traffic_run+0x2b8>)
 80012f6:	2182      	movs	r1, #130	; 0x82
 80012f8:	2028      	movs	r0, #40	; 0x28
 80012fa:	f001 f895 	bl	8002428 <lcd_ShowStr>
			lcd_ShowStr(40, 162, "ERROR!!!", RED, WHITE, 32, 1);
 80012fe:	2301      	movs	r3, #1
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2320      	movs	r3, #32
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001310:	4a8b      	ldr	r2, [pc, #556]	; (8001540 <traffic_run+0x2bc>)
 8001312:	21a2      	movs	r1, #162	; 0xa2
 8001314:	2028      	movs	r0, #40	; 0x28
 8001316:	f001 f887 	bl	8002428 <lcd_ShowStr>
 800131a:	e03a      	b.n	8001392 <traffic_run+0x10e>
		} else {
			// decrease timer every 1s
			lcd_ShowStr(40, 130, "SYSTEM", WHITE, WHITE, 32, 1);
 800131c:	2301      	movs	r3, #1
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2320      	movs	r3, #32
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800132e:	4a83      	ldr	r2, [pc, #524]	; (800153c <traffic_run+0x2b8>)
 8001330:	2182      	movs	r1, #130	; 0x82
 8001332:	2028      	movs	r0, #40	; 0x28
 8001334:	f001 f878 	bl	8002428 <lcd_ShowStr>
			lcd_ShowStr(40, 162, "ERROR!!!", WHITE, WHITE, 32, 1);
 8001338:	2301      	movs	r3, #1
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	2320      	movs	r3, #32
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134a:	4a7d      	ldr	r2, [pc, #500]	; (8001540 <traffic_run+0x2bc>)
 800134c:	21a2      	movs	r1, #162	; 0xa2
 800134e:	2028      	movs	r0, #40	; 0x28
 8001350:	f001 f86a 	bl	8002428 <lcd_ShowStr>
			if (!is_timer_on(1)) {
 8001354:	2001      	movs	r0, #1
 8001356:	f001 fec5 	bl	80030e4 <is_timer_on>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d116      	bne.n	800138e <traffic_run+0x10a>
				if (traffic_light_timer1 > 0)
 8001360:	4b78      	ldr	r3, [pc, #480]	; (8001544 <traffic_run+0x2c0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <traffic_run+0xee>
					traffic_light_timer1--;
 8001368:	4b76      	ldr	r3, [pc, #472]	; (8001544 <traffic_run+0x2c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a75      	ldr	r2, [pc, #468]	; (8001544 <traffic_run+0x2c0>)
 8001370:	6013      	str	r3, [r2, #0]
				if (traffic_light_timer2 > 0)
 8001372:	4b75      	ldr	r3, [pc, #468]	; (8001548 <traffic_run+0x2c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <traffic_run+0x100>
					traffic_light_timer2--;
 800137a:	4b73      	ldr	r3, [pc, #460]	; (8001548 <traffic_run+0x2c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	4a71      	ldr	r2, [pc, #452]	; (8001548 <traffic_run+0x2c4>)
 8001382:	6013      	str	r3, [r2, #0]
				set_timer(1, ONE_SECOND);
 8001384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001388:	2001      	movs	r0, #1
 800138a:	f001 fe4d 	bl	8003028 <set_timer>
			}
			traffic_light_fsm();
 800138e:	f7ff fedf 	bl	8001150 <traffic_light_fsm>
		}
		//button0;
		button0_fsm();
 8001392:	f7ff fde5 	bl	8000f60 <button0_fsm>
		break;
 8001396:	e0c4      	b.n	8001522 <traffic_run+0x29e>

	case RED_ADJUSTMENT:
		// update buffer of red with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 8001398:	4b6c      	ldr	r3, [pc, #432]	; (800154c <traffic_run+0x2c8>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d00b      	beq.n	80013b8 <traffic_run+0x134>
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <traffic_run+0x2c8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d007      	beq.n	80013b8 <traffic_run+0x134>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME) {
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <traffic_run+0x2c8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b06      	cmp	r3, #6
 80013ae:	d003      	beq.n	80013b8 <traffic_run+0x134>
			red_time_buffer = red_time;
 80013b0:	4b61      	ldr	r3, [pc, #388]	; (8001538 <traffic_run+0x2b4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a66      	ldr	r2, [pc, #408]	; (8001550 <traffic_run+0x2cc>)
 80013b6:	6013      	str	r3, [r2, #0]
		}
		// update buffer of four 7-seg leds: value of red buffer and the mode (2)
		update_led_buf(red_time_buffer, red_time_buffer, 2);
 80013b8:	4b65      	ldr	r3, [pc, #404]	; (8001550 <traffic_run+0x2cc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a64      	ldr	r2, [pc, #400]	; (8001550 <traffic_run+0x2cc>)
 80013be:	6811      	ldr	r1, [r2, #0]
 80013c0:	2202      	movs	r2, #2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fcb2 	bl	8002d2c <update_led_buf>
		fsm_led();
 80013c8:	f7ff fd1c 	bl	8000e04 <fsm_led>
		// transition mode function
		button0_fsm();
 80013cc:	f7ff fdc8 	bl	8000f60 <button0_fsm>
		button1_fsm();
 80013d0:	f7ff fe1e 	bl	8001010 <button1_fsm>
		button2_fsm();
 80013d4:	f7ff fe82 	bl	80010dc <button2_fsm>
		break;
 80013d8:	e0a3      	b.n	8001522 <traffic_run+0x29e>
	case YELLOW_ADJUSTMENT:
		// update buffer of yellow with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <traffic_run+0x2c8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d00b      	beq.n	80013fa <traffic_run+0x176>
 80013e2:	4b5a      	ldr	r3, [pc, #360]	; (800154c <traffic_run+0x2c8>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d007      	beq.n	80013fa <traffic_run+0x176>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME)
 80013ea:	4b58      	ldr	r3, [pc, #352]	; (800154c <traffic_run+0x2c8>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d003      	beq.n	80013fa <traffic_run+0x176>
			yellow_time_buffer = yellow_time;
 80013f2:	4b50      	ldr	r3, [pc, #320]	; (8001534 <traffic_run+0x2b0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a57      	ldr	r2, [pc, #348]	; (8001554 <traffic_run+0x2d0>)
 80013f8:	6013      	str	r3, [r2, #0]
		// update buffer of four 7-seg leds: value of yellow buffer and the mode (3)
		update_led_buf(yellow_time_buffer, yellow_time_buffer, 3);
 80013fa:	4b56      	ldr	r3, [pc, #344]	; (8001554 <traffic_run+0x2d0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a55      	ldr	r2, [pc, #340]	; (8001554 <traffic_run+0x2d0>)
 8001400:	6811      	ldr	r1, [r2, #0]
 8001402:	2203      	movs	r2, #3
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fc91 	bl	8002d2c <update_led_buf>
		fsm_led();
 800140a:	f7ff fcfb 	bl	8000e04 <fsm_led>
		// transition mode function
		button0_fsm();
 800140e:	f7ff fda7 	bl	8000f60 <button0_fsm>
		button1_fsm();
 8001412:	f7ff fdfd 	bl	8001010 <button1_fsm>
		button2_fsm();
 8001416:	f7ff fe61 	bl	80010dc <button2_fsm>

		break;
 800141a:	e082      	b.n	8001522 <traffic_run+0x29e>
	case GREEN_ADJUSTMENT:
		// update buffer of green with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <traffic_run+0x2c8>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d00b      	beq.n	800143c <traffic_run+0x1b8>
 8001424:	4b49      	ldr	r3, [pc, #292]	; (800154c <traffic_run+0x2c8>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d007      	beq.n	800143c <traffic_run+0x1b8>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME)
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <traffic_run+0x2c8>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b06      	cmp	r3, #6
 8001432:	d003      	beq.n	800143c <traffic_run+0x1b8>
			green_time_buffer = green_time;
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <traffic_run+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a47      	ldr	r2, [pc, #284]	; (8001558 <traffic_run+0x2d4>)
 800143a:	6013      	str	r3, [r2, #0]
		// update buffer of four 7-seg leds: value of yellow buffer and the mode (4)
		update_led_buf(green_time_buffer, green_time_buffer, 4);
 800143c:	4b46      	ldr	r3, [pc, #280]	; (8001558 <traffic_run+0x2d4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a45      	ldr	r2, [pc, #276]	; (8001558 <traffic_run+0x2d4>)
 8001442:	6811      	ldr	r1, [r2, #0]
 8001444:	2204      	movs	r2, #4
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fc70 	bl	8002d2c <update_led_buf>
		fsm_led();
 800144c:	f7ff fcda 	bl	8000e04 <fsm_led>
		// transition mode function
		button0_fsm();
 8001450:	f7ff fd86 	bl	8000f60 <button0_fsm>
		button1_fsm();
 8001454:	f7ff fddc 	bl	8001010 <button1_fsm>
		button2_fsm();
 8001458:	f7ff fe40 	bl	80010dc <button2_fsm>
		break;
 800145c:	e061      	b.n	8001522 <traffic_run+0x29e>

	case SET_VALUE:
		// update the time value based-on previous state
		if (light_pre_st == RED_ADJUSTMENT) {
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <traffic_run+0x2c8>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d104      	bne.n	8001470 <traffic_run+0x1ec>
			red_time = red_time_buffer;
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <traffic_run+0x2cc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a33      	ldr	r2, [pc, #204]	; (8001538 <traffic_run+0x2b4>)
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e010      	b.n	8001492 <traffic_run+0x20e>
		} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 8001470:	4b36      	ldr	r3, [pc, #216]	; (800154c <traffic_run+0x2c8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d104      	bne.n	8001482 <traffic_run+0x1fe>
			yellow_time = yellow_time_buffer;
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <traffic_run+0x2d0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2d      	ldr	r2, [pc, #180]	; (8001534 <traffic_run+0x2b0>)
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e007      	b.n	8001492 <traffic_run+0x20e>
		} else if (light_pre_st == GREEN_ADJUSTMENT) {
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <traffic_run+0x2c8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d103      	bne.n	8001492 <traffic_run+0x20e>
			green_time = green_time_buffer;
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <traffic_run+0x2d4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a28      	ldr	r2, [pc, #160]	; (8001530 <traffic_run+0x2ac>)
 8001490:	6013      	str	r3, [r2, #0]
		}

		light_st = light_pre_st;
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <traffic_run+0x2c8>)
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <traffic_run+0x2a8>)
 8001498:	701a      	strb	r2, [r3, #0]
		light_pre_st = SET_VALUE;
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <traffic_run+0x2c8>)
 800149c:	2204      	movs	r2, #4
 800149e:	701a      	strb	r2, [r3, #0]
		break;
 80014a0:	e03f      	b.n	8001522 <traffic_run+0x29e>
	case INCREASE_BY_1:
		// increase the time value based-on previous state (short-pressed)
		increase_value();
 80014a2:	f7ff fd1b 	bl	8000edc <increase_value>
		light_st = light_pre_st;
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <traffic_run+0x2c8>)
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <traffic_run+0x2a8>)
 80014ac:	701a      	strb	r2, [r3, #0]
		light_pre_st = INCREASE_BY_1;
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <traffic_run+0x2c8>)
 80014b0:	2205      	movs	r2, #5
 80014b2:	701a      	strb	r2, [r3, #0]
		break;
 80014b4:	e035      	b.n	8001522 <traffic_run+0x29e>
	case INCREASE_BY_1_OVER_TIME:
		// increase the time value every 0.25s based-on previous state (short-pressed)
		if (light_pre_st == RED_ADJUSTMENT) {
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <traffic_run+0x2c8>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d108      	bne.n	80014d0 <traffic_run+0x24c>
			update_led_buf(red_time_buffer, red_time_buffer, 2);
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <traffic_run+0x2cc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a23      	ldr	r2, [pc, #140]	; (8001550 <traffic_run+0x2cc>)
 80014c4:	6811      	ldr	r1, [r2, #0]
 80014c6:	2202      	movs	r2, #2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fc2f 	bl	8002d2c <update_led_buf>
 80014ce:	e018      	b.n	8001502 <traffic_run+0x27e>
		} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <traffic_run+0x2c8>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d108      	bne.n	80014ea <traffic_run+0x266>
			update_led_buf(yellow_time_buffer, yellow_time_buffer, 3);
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <traffic_run+0x2d0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <traffic_run+0x2d0>)
 80014de:	6811      	ldr	r1, [r2, #0]
 80014e0:	2203      	movs	r2, #3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fc22 	bl	8002d2c <update_led_buf>
 80014e8:	e00b      	b.n	8001502 <traffic_run+0x27e>
		} else if (light_pre_st == GREEN_ADJUSTMENT) {
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <traffic_run+0x2c8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d107      	bne.n	8001502 <traffic_run+0x27e>
			update_led_buf(green_time_buffer, green_time_buffer, 4);
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <traffic_run+0x2d4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <traffic_run+0x2d4>)
 80014f8:	6811      	ldr	r1, [r2, #0]
 80014fa:	2204      	movs	r2, #4
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fc15 	bl	8002d2c <update_led_buf>
		}
		if (!is_timer_on(4)) {
 8001502:	2004      	movs	r0, #4
 8001504:	f001 fdee 	bl	80030e4 <is_timer_on>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <traffic_run+0x296>
			increase_value();
 800150e:	f7ff fce5 	bl	8000edc <increase_value>
			set_timer(4, INCREASE_TIME);
 8001512:	21fa      	movs	r1, #250	; 0xfa
 8001514:	2004      	movs	r0, #4
 8001516:	f001 fd87 	bl	8003028 <set_timer>
		}
		button1_fsm();
 800151a:	f7ff fd79 	bl	8001010 <button1_fsm>
		break;
 800151e:	e000      	b.n	8001522 <traffic_run+0x29e>
	default:
		break;
 8001520:	bf00      	nop
	}
	LCD_DisplayNum();
 8001522:	f001 fc43 	bl	8002dac <LCD_DisplayNum>
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000004e 	.word	0x2000004e
 8001530:	20000008 	.word	0x20000008
 8001534:	2000000c 	.word	0x2000000c
 8001538:	20000004 	.word	0x20000004
 800153c:	080057d0 	.word	0x080057d0
 8001540:	080057d8 	.word	0x080057d8
 8001544:	2000001c 	.word	0x2000001c
 8001548:	20000020 	.word	0x20000020
 800154c:	2000004f 	.word	0x2000004f
 8001550:	20000010 	.word	0x20000010
 8001554:	20000018 	.word	0x20000018
 8001558:	20000014 	.word	0x20000014

0800155c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <MX_FSMC_Init+0xec>)
 800158a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800158e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_FSMC_Init+0xec>)
 8001592:	4a2e      	ldr	r2, [pc, #184]	; (800164c <MX_FSMC_Init+0xf0>)
 8001594:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <MX_FSMC_Init+0xec>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_FSMC_Init+0xec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <MX_FSMC_Init+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <MX_FSMC_Init+0xec>)
 80015aa:	2210      	movs	r2, #16
 80015ac:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_FSMC_Init+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <MX_FSMC_Init+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <MX_FSMC_Init+0xec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_FSMC_Init+0xec>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <MX_FSMC_Init+0xec>)
 80015c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_FSMC_Init+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_FSMC_Init+0xec>)
 80015d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_FSMC_Init+0xec>)
 80015de:	2200      	movs	r2, #0
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_FSMC_Init+0xec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_FSMC_Init+0xec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80015ee:	230f      	movs	r3, #15
 80015f0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80015f2:	230f      	movs	r3, #15
 80015f4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80015f6:	233c      	movs	r3, #60	; 0x3c
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80015fe:	2310      	movs	r3, #16
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001602:	2311      	movs	r3, #17
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800160a:	2308      	movs	r3, #8
 800160c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800160e:	230f      	movs	r3, #15
 8001610:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001612:	2309      	movs	r3, #9
 8001614:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800161a:	2310      	movs	r3, #16
 800161c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800161e:	2311      	movs	r3, #17
 8001620:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001626:	463a      	mov	r2, r7
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_FSMC_Init+0xec>)
 8001630:	f003 fb00 	bl	8004c34 <HAL_SRAM_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800163a:	f001 fce5 	bl	8003008 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800163e:	bf00      	nop
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000080 	.word	0x20000080
 800164c:	a0000104 	.word	0xa0000104

08001650 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_FSMC_MspInit+0x88>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d131      	bne.n	80016d0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_FSMC_MspInit+0x88>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_FSMC_MspInit+0x8c>)
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_FSMC_MspInit+0x8c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6393      	str	r3, [r2, #56]	; 0x38
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_FSMC_MspInit+0x8c>)
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800168e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001692:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80016a0:	230c      	movs	r3, #12
 80016a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4619      	mov	r1, r3
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <HAL_FSMC_MspInit+0x90>)
 80016aa:	f002 f861 	bl	8003770 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80016ae:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80016b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80016c0:	230c      	movs	r3, #12
 80016c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <HAL_FSMC_MspInit+0x94>)
 80016ca:	f002 f851 	bl	8003770 <HAL_GPIO_Init>
 80016ce:	e000      	b.n	80016d2 <HAL_FSMC_MspInit+0x82>
    return;
 80016d0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000054 	.word	0x20000054
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40020c00 	.word	0x40020c00

080016e8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016f0:	f7ff ffae 	bl	8001650 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a6e      	ldr	r2, [pc, #440]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a67      	ldr	r2, [pc, #412]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a60      	ldr	r2, [pc, #384]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b5e      	ldr	r3, [pc, #376]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b5a      	ldr	r3, [pc, #360]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a59      	ldr	r2, [pc, #356]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 80017a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a44      	ldr	r2, [pc, #272]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <MX_GPIO_Init+0x1d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2170      	movs	r1, #112	; 0x70
 80017da:	483f      	ldr	r0, [pc, #252]	; (80018d8 <MX_GPIO_Init+0x1dc>)
 80017dc:	f002 f964 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e6:	483d      	ldr	r0, [pc, #244]	; (80018dc <MX_GPIO_Init+0x1e0>)
 80017e8:	f002 f95e 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2140      	movs	r1, #64	; 0x40
 80017f0:	483b      	ldr	r0, [pc, #236]	; (80018e0 <MX_GPIO_Init+0x1e4>)
 80017f2:	f002 f959 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fc:	4839      	ldr	r0, [pc, #228]	; (80018e4 <MX_GPIO_Init+0x1e8>)
 80017fe:	f002 f953 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2108      	movs	r1, #8
 8001806:	4838      	ldr	r0, [pc, #224]	; (80018e8 <MX_GPIO_Init+0x1ec>)
 8001808:	f002 f94e 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800180c:	2370      	movs	r3, #112	; 0x70
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	482d      	ldr	r0, [pc, #180]	; (80018d8 <MX_GPIO_Init+0x1dc>)
 8001824:	f001 ffa4 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4826      	ldr	r0, [pc, #152]	; (80018dc <MX_GPIO_Init+0x1e0>)
 8001842:	f001 ff95 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001846:	23c0      	movs	r3, #192	; 0xc0
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4822      	ldr	r0, [pc, #136]	; (80018e4 <MX_GPIO_Init+0x1e8>)
 800185a:	f001 ff89 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800185e:	2330      	movs	r3, #48	; 0x30
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	481a      	ldr	r0, [pc, #104]	; (80018dc <MX_GPIO_Init+0x1e0>)
 8001872:	f001 ff7d 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001876:	2340      	movs	r3, #64	; 0x40
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4814      	ldr	r0, [pc, #80]	; (80018e0 <MX_GPIO_Init+0x1e4>)
 800188e:	f001 ff6f 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	480e      	ldr	r0, [pc, #56]	; (80018e4 <MX_GPIO_Init+0x1e8>)
 80018ac:	f001 ff60 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80018b0:	2308      	movs	r3, #8
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	4808      	ldr	r0, [pc, #32]	; (80018e8 <MX_GPIO_Init+0x1ec>)
 80018c8:	f001 ff52 	bl	8003770 <HAL_GPIO_Init>

}
 80018cc:	bf00      	nop
 80018ce:	3730      	adds	r7, #48	; 0x30
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020c00 	.word	0x40020c00

080018ec <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <LCD_WR_REG+0x1c>)
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	8013      	strh	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	600ffffe 	.word	0x600ffffe

0800190c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <LCD_WR_DATA+0x1c>)
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	8053      	strh	r3, [r2, #2]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	600ffffe 	.word	0x600ffffe

0800192c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <LCD_RD_DATA+0x20>)
 8001934:	885b      	ldrh	r3, [r3, #2]
 8001936:	b29b      	uxth	r3, r3
 8001938:	80fb      	strh	r3, [r7, #6]
	return ram;
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	b29b      	uxth	r3, r3
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	600ffffe 	.word	0x600ffffe

08001950 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4604      	mov	r4, r0
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	4603      	mov	r3, r0
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]
 800196a:	4613      	mov	r3, r2
 800196c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800196e:	202a      	movs	r0, #42	; 0x2a
 8001970:	f7ff ffbc 	bl	80018ec <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	b29b      	uxth	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ffc6 	bl	800190c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	b29b      	uxth	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ffc0 	bl	800190c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	b29b      	uxth	r3, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ffba 	bl	800190c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ffb4 	bl	800190c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80019a4:	202b      	movs	r0, #43	; 0x2b
 80019a6:	f7ff ffa1 	bl	80018ec <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ffab 	bl	800190c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ffa5 	bl	800190c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80019c2:	883b      	ldrh	r3, [r7, #0]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff9f 	bl	800190c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80019ce:	883b      	ldrh	r3, [r7, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff99 	bl	800190c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80019da:	202c      	movs	r0, #44	; 0x2c
 80019dc:	f7ff ff86 	bl	80018ec <LCD_WR_REG>
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}

080019e8 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <lcd_Clear+0x60>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <lcd_Clear+0x60>)
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff ffa3 	bl	8001950 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	81fb      	strh	r3, [r7, #14]
 8001a0e:	e011      	b.n	8001a34 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	81bb      	strh	r3, [r7, #12]
 8001a14:	e006      	b.n	8001a24 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff77 	bl	800190c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001a1e:	89bb      	ldrh	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	81bb      	strh	r3, [r7, #12]
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <lcd_Clear+0x60>)
 8001a26:	885b      	ldrh	r3, [r3, #2]
 8001a28:	89ba      	ldrh	r2, [r7, #12]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3f3      	bcc.n	8001a16 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	3301      	adds	r3, #1
 8001a32:	81fb      	strh	r3, [r7, #14]
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <lcd_Clear+0x60>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	89fa      	ldrh	r2, [r7, #14]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3e8      	bcc.n	8001a10 <lcd_Clear+0x28>
		}
	}
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200000d0 	.word	0x200000d0

08001a4c <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4604      	mov	r4, r0
 8001a54:	4608      	mov	r0, r1
 8001a56:	4611      	mov	r1, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	80fb      	strh	r3, [r7, #6]
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80bb      	strh	r3, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	807b      	strh	r3, [r7, #2]
 8001a66:	4613      	mov	r3, r2
 8001a68:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	883b      	ldrh	r3, [r7, #0]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	88b9      	ldrh	r1, [r7, #4]
 8001a78:	88f8      	ldrh	r0, [r7, #6]
 8001a7a:	f7ff ff69 	bl	8001950 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	81fb      	strh	r3, [r7, #14]
 8001a82:	e010      	b.n	8001aa6 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	81bb      	strh	r3, [r7, #12]
 8001a88:	e006      	b.n	8001a98 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001a8a:	8c3b      	ldrh	r3, [r7, #32]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff3d 	bl	800190c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	3301      	adds	r3, #1
 8001a96:	81bb      	strh	r3, [r7, #12]
 8001a98:	89ba      	ldrh	r2, [r7, #12]
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d3f4      	bcc.n	8001a8a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001aa0:	89fb      	ldrh	r3, [r7, #14]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	81fb      	strh	r3, [r7, #14]
 8001aa6:	89fa      	ldrh	r2, [r7, #14]
 8001aa8:	883b      	ldrh	r3, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3ea      	bcc.n	8001a84 <lcd_Fill+0x38>
		}
	}
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}

08001ab8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	80bb      	strh	r3, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001aca:	88bb      	ldrh	r3, [r7, #4]
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	88b9      	ldrh	r1, [r7, #4]
 8001ad0:	88f8      	ldrh	r0, [r7, #6]
 8001ad2:	f7ff ff3d 	bl	8001950 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff17 	bl	800190c <LCD_WR_DATA>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001ae6:	b590      	push	{r4, r7, lr}
 8001ae8:	b08d      	sub	sp, #52	; 0x34
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4604      	mov	r4, r0
 8001aee:	4608      	mov	r0, r1
 8001af0:	4611      	mov	r1, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	80fb      	strh	r3, [r7, #6]
 8001af8:	4603      	mov	r3, r0
 8001afa:	80bb      	strh	r3, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001b14:	883a      	ldrh	r2, [r7, #0]
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	dd02      	ble.n	8001b30 <lcd_DrawLine+0x4a>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e00b      	b.n	8001b48 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <lcd_DrawLine+0x56>
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e005      	b.n	8001b48 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	425b      	negs	r3, r3
 8001b46:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dd02      	ble.n	8001b54 <lcd_DrawLine+0x6e>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	e00b      	b.n	8001b6c <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <lcd_DrawLine+0x7a>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e005      	b.n	8001b6c <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	425b      	negs	r3, r3
 8001b6a:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dd02      	ble.n	8001b7a <lcd_DrawLine+0x94>
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e001      	b.n	8001b7e <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b82:	e02b      	b.n	8001bdc <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	b291      	uxth	r1, r2
 8001b8c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff91 	bl	8001ab8 <lcd_DrawPoint>
		xerr+=delta_x;
 8001b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dd07      	ble.n	8001bbe <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dd07      	ble.n	8001bd6 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bd8:	3301      	adds	r3, #1
 8001bda:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001bdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dacf      	bge.n	8001b84 <lcd_DrawLine+0x9e>
		}
	}
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3734      	adds	r7, #52	; 0x34
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}

08001bee <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af02      	add	r7, sp, #8
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4603      	mov	r3, r0
 8001c02:	80bb      	strh	r3, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001c0c:	88bc      	ldrh	r4, [r7, #4]
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	88b9      	ldrh	r1, [r7, #4]
 8001c12:	88f8      	ldrh	r0, [r7, #6]
 8001c14:	8b3b      	ldrh	r3, [r7, #24]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4623      	mov	r3, r4
 8001c1a:	f7ff ff64 	bl	8001ae6 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001c1e:	883c      	ldrh	r4, [r7, #0]
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	88b9      	ldrh	r1, [r7, #4]
 8001c24:	88f8      	ldrh	r0, [r7, #6]
 8001c26:	8b3b      	ldrh	r3, [r7, #24]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	f7ff ff5b 	bl	8001ae6 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001c30:	883c      	ldrh	r4, [r7, #0]
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	8839      	ldrh	r1, [r7, #0]
 8001c36:	88f8      	ldrh	r0, [r7, #6]
 8001c38:	8b3b      	ldrh	r3, [r7, #24]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	4623      	mov	r3, r4
 8001c3e:	f7ff ff52 	bl	8001ae6 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001c42:	883c      	ldrh	r4, [r7, #0]
 8001c44:	887a      	ldrh	r2, [r7, #2]
 8001c46:	88b9      	ldrh	r1, [r7, #4]
 8001c48:	8878      	ldrh	r0, [r7, #2]
 8001c4a:	8b3b      	ldrh	r3, [r7, #24]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4623      	mov	r3, r4
 8001c50:	f7ff ff49 	bl	8001ae6 <lcd_DrawLine>
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd90      	pop	{r4, r7, pc}

08001c5c <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	80fb      	strh	r3, [r7, #6]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80bb      	strh	r3, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
 8001c76:	4613      	mov	r3, r2
 8001c78:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001c82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c86:	085b      	lsrs	r3, r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf14      	ite	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	2300      	moveq	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	fb12 f303 	smulbb	r3, r2, r3
 8001cb2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	3b20      	subs	r3, #32
 8001cb8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29c      	uxth	r4, r3
 8001cc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	88bb      	ldrh	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	88b9      	ldrh	r1, [r7, #4]
 8001cda:	88f8      	ldrh	r0, [r7, #6]
 8001cdc:	4622      	mov	r2, r4
 8001cde:	f7ff fe37 	bl	8001950 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	827b      	strh	r3, [r7, #18]
 8001ce6:	e07a      	b.n	8001dde <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001ce8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d028      	beq.n	8001d42 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001cf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d108      	bne.n	8001d0a <lcd_ShowChar+0xae>
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	8a7b      	ldrh	r3, [r7, #18]
 8001cfc:	493c      	ldr	r1, [pc, #240]	; (8001df0 <lcd_ShowChar+0x194>)
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	440a      	add	r2, r1
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	75fb      	strb	r3, [r7, #23]
 8001d08:	e01b      	b.n	8001d42 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001d0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d0e:	2b18      	cmp	r3, #24
 8001d10:	d10b      	bne.n	8001d2a <lcd_ShowChar+0xce>
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	8a79      	ldrh	r1, [r7, #18]
 8001d16:	4837      	ldr	r0, [pc, #220]	; (8001df4 <lcd_ShowChar+0x198>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	4403      	add	r3, r0
 8001d22:	440b      	add	r3, r1
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	75fb      	strb	r3, [r7, #23]
 8001d28:	e00b      	b.n	8001d42 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001d2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	d15a      	bne.n	8001de8 <lcd_ShowChar+0x18c>
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	8a7b      	ldrh	r3, [r7, #18]
 8001d36:	4930      	ldr	r1, [pc, #192]	; (8001df8 <lcd_ShowChar+0x19c>)
 8001d38:	0192      	lsls	r2, r2, #6
 8001d3a:	440a      	add	r2, r1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	75bb      	strb	r3, [r7, #22]
 8001d46:	e044      	b.n	8001dd2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001d48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d120      	bne.n	8001d92 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001d50:	7dfa      	ldrb	r2, [r7, #23]
 8001d52:	7dbb      	ldrb	r3, [r7, #22]
 8001d54:	fa42 f303 	asr.w	r3, r2, r3
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <lcd_ShowChar+0x10e>
 8001d60:	883b      	ldrh	r3, [r7, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fdd2 	bl	800190c <LCD_WR_DATA>
 8001d68:	e003      	b.n	8001d72 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001d6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fdcd 	bl	800190c <LCD_WR_DATA>
				m++;
 8001d72:	7d7b      	ldrb	r3, [r7, #21]
 8001d74:	3301      	adds	r3, #1
 8001d76:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001d78:	7d7b      	ldrb	r3, [r7, #21]
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d80:	fb02 f201 	mul.w	r2, r2, r1
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d11f      	bne.n	8001dcc <lcd_ShowChar+0x170>
				{
					m=0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	757b      	strb	r3, [r7, #21]
					break;
 8001d90:	e022      	b.n	8001dd8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001d92:	7dfa      	ldrb	r2, [r7, #23]
 8001d94:	7dbb      	ldrb	r3, [r7, #22]
 8001d96:	fa42 f303 	asr.w	r3, r2, r3
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <lcd_ShowChar+0x152>
 8001da2:	883a      	ldrh	r2, [r7, #0]
 8001da4:	88b9      	ldrh	r1, [r7, #4]
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fe85 	bl	8001ab8 <lcd_DrawPoint>
				x++;
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	3301      	adds	r3, #1
 8001db2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	8a3b      	ldrh	r3, [r7, #16]
 8001db8:	1ad2      	subs	r2, r2, r3
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d105      	bne.n	8001dcc <lcd_ShowChar+0x170>
				{
					x=x0;
 8001dc0:	8a3b      	ldrh	r3, [r7, #16]
 8001dc2:	80fb      	strh	r3, [r7, #6]
					y++;
 8001dc4:	88bb      	ldrh	r3, [r7, #4]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	80bb      	strh	r3, [r7, #4]
					break;
 8001dca:	e005      	b.n	8001dd8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001dcc:	7dbb      	ldrb	r3, [r7, #22]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	75bb      	strb	r3, [r7, #22]
 8001dd2:	7dbb      	ldrb	r3, [r7, #22]
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d9b7      	bls.n	8001d48 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001dd8:	8a7b      	ldrh	r3, [r7, #18]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	827b      	strh	r3, [r7, #18]
 8001dde:	8a7a      	ldrh	r2, [r7, #18]
 8001de0:	89bb      	ldrh	r3, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d380      	bcc.n	8001ce8 <lcd_ShowChar+0x8c>
 8001de6:	e000      	b.n	8001dea <lcd_ShowChar+0x18e>
		else return;
 8001de8:	bf00      	nop
				}
			}
		}
	}
}
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}
 8001df0:	080057fc 	.word	0x080057fc
 8001df4:	08005dec 	.word	0x08005dec
 8001df8:	08006fbc 	.word	0x08006fbc

08001dfc <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001e10:	e004      	b.n	8001e1c <mypow+0x20>
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	1e5a      	subs	r2, r3, #1
 8001e20:	71ba      	strb	r2, [r7, #6]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f5      	bne.n	8001e12 <mypow+0x16>
	return result;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af04      	add	r7, sp, #16
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4623      	mov	r3, r4
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	4603      	mov	r3, r0
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	807b      	strh	r3, [r7, #2]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001e56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e059      	b.n	8001f18 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001e64:	887c      	ldrh	r4, [r7, #2]
 8001e66:	787a      	ldrb	r2, [r7, #1]
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	4619      	mov	r1, r3
 8001e74:	200a      	movs	r0, #10
 8001e76:	f7ff ffc1 	bl	8001dfc <mypow>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <lcd_ShowIntNum+0xf8>)
 8001e82:	fba3 2301 	umull	r2, r3, r3, r1
 8001e86:	08da      	lsrs	r2, r3, #3
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	1aca      	subs	r2, r1, r3
 8001e92:	4613      	mov	r3, r2
 8001e94:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001e96:	7bbb      	ldrb	r3, [r7, #14]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d121      	bne.n	8001ee0 <lcd_ShowIntNum+0xac>
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	787b      	ldrb	r3, [r7, #1]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	da1c      	bge.n	8001ee0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001ea6:	7b3b      	ldrb	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d117      	bne.n	8001edc <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	7b7b      	ldrb	r3, [r7, #13]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	fb12 f303 	smulbb	r3, r2, r3
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b298      	uxth	r0, r3
 8001ec0:	8c3a      	ldrh	r2, [r7, #32]
 8001ec2:	88b9      	ldrh	r1, [r7, #4]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f7ff fec1 	bl	8001c5c <lcd_ShowChar>
				continue;
 8001eda:	e01a      	b.n	8001f12 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	7b7b      	ldrb	r3, [r7, #13]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	fb12 f303 	smulbb	r3, r2, r3
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b298      	uxth	r0, r3
 8001ef4:	7b3b      	ldrb	r3, [r7, #12]
 8001ef6:	3330      	adds	r3, #48	; 0x30
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	8c3c      	ldrh	r4, [r7, #32]
 8001efc:	88b9      	ldrh	r1, [r7, #4]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4623      	mov	r3, r4
 8001f0e:	f7ff fea5 	bl	8001c5c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	3301      	adds	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	787b      	ldrb	r3, [r7, #1]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3a1      	bcc.n	8001e64 <lcd_ShowIntNum+0x30>
	}
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	cccccccd 	.word	0xcccccccd

08001f30 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <lcd_SetDir+0x44>)
 8001f4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f50:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <lcd_SetDir+0x44>)
 8001f54:	22f0      	movs	r2, #240	; 0xf0
 8001f56:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001f58:	e006      	b.n	8001f68 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <lcd_SetDir+0x44>)
 8001f5c:	22f0      	movs	r2, #240	; 0xf0
 8001f5e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <lcd_SetDir+0x44>)
 8001f62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f66:	805a      	strh	r2, [r3, #2]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	200000d0 	.word	0x200000d0

08001f78 <lcd_init>:


void lcd_init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f82:	48aa      	ldr	r0, [pc, #680]	; (800222c <lcd_init+0x2b4>)
 8001f84:	f001 fd90 	bl	8003aa8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f8c:	f001 faba 	bl	8003504 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f96:	48a5      	ldr	r0, [pc, #660]	; (800222c <lcd_init+0x2b4>)
 8001f98:	f001 fd86 	bl	8003aa8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fa0:	f001 fab0 	bl	8003504 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff ffc3 	bl	8001f30 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001faa:	20d3      	movs	r0, #211	; 0xd3
 8001fac:	f7ff fc9e 	bl	80018ec <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001fb0:	f7ff fcbc 	bl	800192c <LCD_RD_DATA>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b9d      	ldr	r3, [pc, #628]	; (8002230 <lcd_init+0x2b8>)
 8001fba:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001fbc:	f7ff fcb6 	bl	800192c <LCD_RD_DATA>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b9a      	ldr	r3, [pc, #616]	; (8002230 <lcd_init+0x2b8>)
 8001fc6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001fc8:	f7ff fcb0 	bl	800192c <LCD_RD_DATA>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b97      	ldr	r3, [pc, #604]	; (8002230 <lcd_init+0x2b8>)
 8001fd2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <lcd_init+0x2b8>)
 8001fd6:	889b      	ldrh	r3, [r3, #4]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b94      	ldr	r3, [pc, #592]	; (8002230 <lcd_init+0x2b8>)
 8001fde:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001fe0:	f7ff fca4 	bl	800192c <LCD_RD_DATA>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b91      	ldr	r3, [pc, #580]	; (8002230 <lcd_init+0x2b8>)
 8001fea:	889b      	ldrh	r3, [r3, #4]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b8f      	ldr	r3, [pc, #572]	; (8002230 <lcd_init+0x2b8>)
 8001ff2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001ff4:	20cf      	movs	r0, #207	; 0xcf
 8001ff6:	f7ff fc79 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff fc86 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002000:	20c1      	movs	r0, #193	; 0xc1
 8002002:	f7ff fc83 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002006:	2030      	movs	r0, #48	; 0x30
 8002008:	f7ff fc80 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800200c:	20ed      	movs	r0, #237	; 0xed
 800200e:	f7ff fc6d 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002012:	2064      	movs	r0, #100	; 0x64
 8002014:	f7ff fc7a 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002018:	2003      	movs	r0, #3
 800201a:	f7ff fc77 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800201e:	2012      	movs	r0, #18
 8002020:	f7ff fc74 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002024:	2081      	movs	r0, #129	; 0x81
 8002026:	f7ff fc71 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800202a:	20e8      	movs	r0, #232	; 0xe8
 800202c:	f7ff fc5e 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002030:	2085      	movs	r0, #133	; 0x85
 8002032:	f7ff fc6b 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002036:	2010      	movs	r0, #16
 8002038:	f7ff fc68 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800203c:	207a      	movs	r0, #122	; 0x7a
 800203e:	f7ff fc65 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002042:	20cb      	movs	r0, #203	; 0xcb
 8002044:	f7ff fc52 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002048:	2039      	movs	r0, #57	; 0x39
 800204a:	f7ff fc5f 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800204e:	202c      	movs	r0, #44	; 0x2c
 8002050:	f7ff fc5c 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff fc59 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800205a:	2034      	movs	r0, #52	; 0x34
 800205c:	f7ff fc56 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002060:	2002      	movs	r0, #2
 8002062:	f7ff fc53 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002066:	20f7      	movs	r0, #247	; 0xf7
 8002068:	f7ff fc40 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800206c:	2020      	movs	r0, #32
 800206e:	f7ff fc4d 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002072:	20ea      	movs	r0, #234	; 0xea
 8002074:	f7ff fc3a 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff fc47 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fc44 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002084:	20c0      	movs	r0, #192	; 0xc0
 8002086:	f7ff fc31 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800208a:	201b      	movs	r0, #27
 800208c:	f7ff fc3e 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002090:	20c1      	movs	r0, #193	; 0xc1
 8002092:	f7ff fc2b 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff fc38 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800209c:	20c5      	movs	r0, #197	; 0xc5
 800209e:	f7ff fc25 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80020a2:	2030      	movs	r0, #48	; 0x30
 80020a4:	f7ff fc32 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80020a8:	2030      	movs	r0, #48	; 0x30
 80020aa:	f7ff fc2f 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80020ae:	20c7      	movs	r0, #199	; 0xc7
 80020b0:	f7ff fc1c 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80020b4:	20b7      	movs	r0, #183	; 0xb7
 80020b6:	f7ff fc29 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80020ba:	2036      	movs	r0, #54	; 0x36
 80020bc:	f7ff fc16 	bl	80018ec <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80020c0:	2008      	movs	r0, #8
 80020c2:	f7ff fc23 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80020c6:	203a      	movs	r0, #58	; 0x3a
 80020c8:	f7ff fc10 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80020cc:	2055      	movs	r0, #85	; 0x55
 80020ce:	f7ff fc1d 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80020d2:	20b1      	movs	r0, #177	; 0xb1
 80020d4:	f7ff fc0a 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff fc17 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80020de:	201a      	movs	r0, #26
 80020e0:	f7ff fc14 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80020e4:	20b6      	movs	r0, #182	; 0xb6
 80020e6:	f7ff fc01 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80020ea:	200a      	movs	r0, #10
 80020ec:	f7ff fc0e 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80020f0:	20a2      	movs	r0, #162	; 0xa2
 80020f2:	f7ff fc0b 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80020f6:	20f2      	movs	r0, #242	; 0xf2
 80020f8:	f7ff fbf8 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fc05 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002102:	2026      	movs	r0, #38	; 0x26
 8002104:	f7ff fbf2 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff fbff 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800210e:	20e0      	movs	r0, #224	; 0xe0
 8002110:	f7ff fbec 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002114:	200f      	movs	r0, #15
 8002116:	f7ff fbf9 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800211a:	202a      	movs	r0, #42	; 0x2a
 800211c:	f7ff fbf6 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002120:	2028      	movs	r0, #40	; 0x28
 8002122:	f7ff fbf3 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002126:	2008      	movs	r0, #8
 8002128:	f7ff fbf0 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800212c:	200e      	movs	r0, #14
 800212e:	f7ff fbed 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002132:	2008      	movs	r0, #8
 8002134:	f7ff fbea 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002138:	2054      	movs	r0, #84	; 0x54
 800213a:	f7ff fbe7 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800213e:	20a9      	movs	r0, #169	; 0xa9
 8002140:	f7ff fbe4 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002144:	2043      	movs	r0, #67	; 0x43
 8002146:	f7ff fbe1 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800214a:	200a      	movs	r0, #10
 800214c:	f7ff fbde 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002150:	200f      	movs	r0, #15
 8002152:	f7ff fbdb 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff fbd8 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fbd5 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff fbd2 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff fbcf 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800216e:	20e1      	movs	r0, #225	; 0xe1
 8002170:	f7ff fbbc 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff fbc9 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800217a:	2015      	movs	r0, #21
 800217c:	f7ff fbc6 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002180:	2017      	movs	r0, #23
 8002182:	f7ff fbc3 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002186:	2007      	movs	r0, #7
 8002188:	f7ff fbc0 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800218c:	2011      	movs	r0, #17
 800218e:	f7ff fbbd 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002192:	2006      	movs	r0, #6
 8002194:	f7ff fbba 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002198:	202b      	movs	r0, #43	; 0x2b
 800219a:	f7ff fbb7 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800219e:	2056      	movs	r0, #86	; 0x56
 80021a0:	f7ff fbb4 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80021a4:	203c      	movs	r0, #60	; 0x3c
 80021a6:	f7ff fbb1 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80021aa:	2005      	movs	r0, #5
 80021ac:	f7ff fbae 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80021b0:	2010      	movs	r0, #16
 80021b2:	f7ff fbab 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80021b6:	200f      	movs	r0, #15
 80021b8:	f7ff fba8 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80021bc:	203f      	movs	r0, #63	; 0x3f
 80021be:	f7ff fba5 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80021c2:	203f      	movs	r0, #63	; 0x3f
 80021c4:	f7ff fba2 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80021c8:	200f      	movs	r0, #15
 80021ca:	f7ff fb9f 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80021ce:	202b      	movs	r0, #43	; 0x2b
 80021d0:	f7ff fb8c 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff fb99 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff fb96 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7ff fb93 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80021e6:	203f      	movs	r0, #63	; 0x3f
 80021e8:	f7ff fb90 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80021ec:	202a      	movs	r0, #42	; 0x2a
 80021ee:	f7ff fb7d 	bl	80018ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff fb8a 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7ff fb87 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff fb84 	bl	800190c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002204:	20ef      	movs	r0, #239	; 0xef
 8002206:	f7ff fb81 	bl	800190c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800220a:	2011      	movs	r0, #17
 800220c:	f7ff fb6e 	bl	80018ec <LCD_WR_REG>
	HAL_Delay(120);
 8002210:	2078      	movs	r0, #120	; 0x78
 8002212:	f001 f977 	bl	8003504 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002216:	2029      	movs	r0, #41	; 0x29
 8002218:	f7ff fb68 	bl	80018ec <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002222:	4804      	ldr	r0, [pc, #16]	; (8002234 <lcd_init+0x2bc>)
 8002224:	f001 fc40 	bl	8003aa8 <HAL_GPIO_WritePin>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40020800 	.word	0x40020800
 8002230:	200000d0 	.word	0x200000d0
 8002234:	40020000 	.word	0x40020000

08002238 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4413      	add	r3, r2
 8002250:	b298      	uxth	r0, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	b29a      	uxth	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4413      	add	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	8b3a      	ldrh	r2, [r7, #24]
 8002260:	4619      	mov	r1, r3
 8002262:	f7ff fc29 	bl	8001ab8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	b29a      	uxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	b29b      	uxth	r3, r3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	b298      	uxth	r0, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	b29a      	uxth	r2, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4413      	add	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	8b3a      	ldrh	r2, [r7, #24]
 8002280:	4619      	mov	r1, r3
 8002282:	f7ff fc19 	bl	8001ab8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	b29b      	uxth	r3, r3
 800228e:	4413      	add	r3, r2
 8002290:	b298      	uxth	r0, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	b29a      	uxth	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	b29b      	uxth	r3, r3
 800229e:	8b3a      	ldrh	r2, [r7, #24]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7ff fc09 	bl	8001ab8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	b298      	uxth	r0, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	b29b      	uxth	r3, r3
 80022be:	8b3a      	ldrh	r2, [r7, #24]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f7ff fbf9 	bl	8001ab8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	b298      	uxth	r0, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4413      	add	r3, r2
 80022dc:	b29b      	uxth	r3, r3
 80022de:	8b3a      	ldrh	r2, [r7, #24]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7ff fbe9 	bl	8001ab8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	b298      	uxth	r0, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	8b3a      	ldrh	r2, [r7, #24]
 8002300:	4619      	mov	r1, r3
 8002302:	f7ff fbd9 	bl	8001ab8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	b29a      	uxth	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4413      	add	r3, r2
 8002310:	b298      	uxth	r0, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	b29b      	uxth	r3, r3
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	b29b      	uxth	r3, r3
 800231e:	8b3a      	ldrh	r2, [r7, #24]
 8002320:	4619      	mov	r1, r3
 8002322:	f7ff fbc9 	bl	8001ab8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	b29a      	uxth	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	b298      	uxth	r0, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	b29a      	uxth	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	b29b      	uxth	r3, r3
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	8b3a      	ldrh	r2, [r7, #24]
 8002340:	4619      	mov	r1, r3
 8002342:	f7ff fbb9 	bl	8001ab8 <lcd_DrawPoint>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b08a      	sub	sp, #40	; 0x28
 8002352:	af02      	add	r7, sp, #8
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	f1c3 0303 	rsb	r3, r3, #3
 800236e:	613b      	str	r3, [r7, #16]


	if (fill)
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	2b00      	cmp	r3, #0
 8002374:	d04f      	beq.n	8002416 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002376:	e029      	b.n	80023cc <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e00a      	b.n	8002394 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff ff55 	bl	8002238 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	429a      	cmp	r2, r3
 800239a:	ddf0      	ble.n	800237e <lcd_DrawCircle+0x30>

			if (d < 0) {
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	da06      	bge.n	80023b0 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	009a      	lsls	r2, r3, #2
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	3306      	adds	r3, #6
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e00a      	b.n	80023c6 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	009a      	lsls	r2, r3, #2
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	330a      	adds	r3, #10
 80023be:	613b      	str	r3, [r7, #16]
				y--;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	ddd1      	ble.n	8002378 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80023d4:	e023      	b.n	800241e <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7ff ff29 	bl	8002238 <_draw_circle_8>
			if (d < 0) {
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	da06      	bge.n	80023fa <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	009a      	lsls	r2, r3, #2
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	3306      	adds	r3, #6
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e00a      	b.n	8002410 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	009a      	lsls	r2, r3, #2
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	330a      	adds	r3, #10
 8002408:	613b      	str	r3, [r7, #16]
				y--;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3b01      	subs	r3, #1
 800240e:	61bb      	str	r3, [r7, #24]
			x++;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	3301      	adds	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	429a      	cmp	r2, r3
 800241c:	dddb      	ble.n	80023d6 <lcd_DrawCircle+0x88>
}
 800241e:	bf00      	nop
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b08b      	sub	sp, #44	; 0x2c
 800242c:	af04      	add	r7, sp, #16
 800242e:	60ba      	str	r2, [r7, #8]
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	81fb      	strh	r3, [r7, #14]
 8002436:	460b      	mov	r3, r1
 8002438:	81bb      	strh	r3, [r7, #12]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002446:	e048      	b.n	80024da <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d145      	bne.n	80024da <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800244e:	89fa      	ldrh	r2, [r7, #14]
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <lcd_ShowStr+0xc4>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	1acb      	subs	r3, r1, r3
 8002460:	429a      	cmp	r2, r3
 8002462:	dc3f      	bgt.n	80024e4 <lcd_ShowStr+0xbc>
 8002464:	89ba      	ldrh	r2, [r7, #12]
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <lcd_ShowStr+0xc4>)
 8002468:	885b      	ldrh	r3, [r3, #2]
 800246a:	4619      	mov	r1, r3
 800246c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002470:	1acb      	subs	r3, r1, r3
 8002472:	429a      	cmp	r2, r3
 8002474:	dc36      	bgt.n	80024e4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d902      	bls.n	8002484 <lcd_ShowStr+0x5c>
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
 8002482:	e02a      	b.n	80024da <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b0d      	cmp	r3, #13
 800248a:	d10b      	bne.n	80024a4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800248c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002490:	b29a      	uxth	r2, r3
 8002492:	89bb      	ldrh	r3, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002498:	8abb      	ldrh	r3, [r7, #20]
 800249a:	81fb      	strh	r3, [r7, #14]
					str++;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3301      	adds	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	e017      	b.n	80024d4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	88fc      	ldrh	r4, [r7, #6]
 80024aa:	89b9      	ldrh	r1, [r7, #12]
 80024ac:	89f8      	ldrh	r0, [r7, #14]
 80024ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	4623      	mov	r3, r4
 80024c0:	f7ff fbcc 	bl	8001c5c <lcd_ShowChar>
					x+=sizey/2;
 80024c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024c8:	085b      	lsrs	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	4413      	add	r3, r2
 80024d2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3301      	adds	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1b2      	bne.n	8002448 <lcd_ShowStr+0x20>
 80024e2:	e000      	b.n	80024e6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80024e4:	bf00      	nop
			}
		}
	}
}
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	200000d0 	.word	0x200000d0

080024f0 <box_rec>:
	uint16_t COLOR_FILL;
	uint8_t is_fill;
} BOX[NUM_BOX];

//draw a rectangle-box
void box_rec(uint8_t box_idx, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color_edge, uint16_t color_fill, uint8_t is_fill) {
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	4604      	mov	r4, r0
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	71fb      	strb	r3, [r7, #7]
 8002502:	4603      	mov	r3, r0
 8002504:	80bb      	strh	r3, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	807b      	strh	r3, [r7, #2]
 800250a:	4613      	mov	r3, r2
 800250c:	803b      	strh	r3, [r7, #0]
	BOX[box_idx].X = x;
 800250e:	79fa      	ldrb	r2, [r7, #7]
 8002510:	4970      	ldr	r1, [pc, #448]	; (80026d4 <box_rec+0x1e4>)
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	440b      	add	r3, r1
 800251c:	88ba      	ldrh	r2, [r7, #4]
 800251e:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].Y = y;
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	496c      	ldr	r1, [pc, #432]	; (80026d4 <box_rec+0x1e4>)
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	440b      	add	r3, r1
 800252e:	3302      	adds	r3, #2
 8002530:	887a      	ldrh	r2, [r7, #2]
 8002532:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].height = height;
 8002534:	79fa      	ldrb	r2, [r7, #7]
 8002536:	4967      	ldr	r1, [pc, #412]	; (80026d4 <box_rec+0x1e4>)
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	440b      	add	r3, r1
 8002542:	3304      	adds	r3, #4
 8002544:	8c3a      	ldrh	r2, [r7, #32]
 8002546:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].width = width;
 8002548:	79fa      	ldrb	r2, [r7, #7]
 800254a:	4962      	ldr	r1, [pc, #392]	; (80026d4 <box_rec+0x1e4>)
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	440b      	add	r3, r1
 8002556:	3306      	adds	r3, #6
 8002558:	883a      	ldrh	r2, [r7, #0]
 800255a:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].COLOR_EDGE = color_edge;
 800255c:	79fa      	ldrb	r2, [r7, #7]
 800255e:	495d      	ldr	r1, [pc, #372]	; (80026d4 <box_rec+0x1e4>)
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	440b      	add	r3, r1
 800256a:	3308      	adds	r3, #8
 800256c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800256e:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].COLOR_FILL = color_fill;
 8002570:	79fa      	ldrb	r2, [r7, #7]
 8002572:	4958      	ldr	r1, [pc, #352]	; (80026d4 <box_rec+0x1e4>)
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	440b      	add	r3, r1
 800257e:	330a      	adds	r3, #10
 8002580:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002582:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].is_fill = is_fill;
 8002584:	79fa      	ldrb	r2, [r7, #7]
 8002586:	4953      	ldr	r1, [pc, #332]	; (80026d4 <box_rec+0x1e4>)
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	440b      	add	r3, r1
 8002592:	330c      	adds	r3, #12
 8002594:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002598:	701a      	strb	r2, [r3, #0]

	lcd_DrawRectangle(
 800259a:	79fa      	ldrb	r2, [r7, #7]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <box_rec+0x1e4>)
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	440b      	add	r3, r1
 80025a8:	8818      	ldrh	r0, [r3, #0]
 80025aa:	79fa      	ldrb	r2, [r7, #7]
 80025ac:	4949      	ldr	r1, [pc, #292]	; (80026d4 <box_rec+0x1e4>)
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	440b      	add	r3, r1
 80025b8:	3302      	adds	r3, #2
 80025ba:	881c      	ldrh	r4, [r3, #0]
		BOX[box_idx].X, BOX[box_idx].Y,
		BOX[box_idx].X + BOX[box_idx].width, BOX[box_idx].Y + BOX[box_idx].height,
 80025bc:	79fa      	ldrb	r2, [r7, #7]
 80025be:	4945      	ldr	r1, [pc, #276]	; (80026d4 <box_rec+0x1e4>)
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	440b      	add	r3, r1
 80025ca:	8819      	ldrh	r1, [r3, #0]
 80025cc:	79fa      	ldrb	r2, [r7, #7]
 80025ce:	4d41      	ldr	r5, [pc, #260]	; (80026d4 <box_rec+0x1e4>)
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	442b      	add	r3, r5
 80025da:	3306      	adds	r3, #6
 80025dc:	881b      	ldrh	r3, [r3, #0]
	lcd_DrawRectangle(
 80025de:	440b      	add	r3, r1
 80025e0:	b29d      	uxth	r5, r3
		BOX[box_idx].X + BOX[box_idx].width, BOX[box_idx].Y + BOX[box_idx].height,
 80025e2:	79fa      	ldrb	r2, [r7, #7]
 80025e4:	493b      	ldr	r1, [pc, #236]	; (80026d4 <box_rec+0x1e4>)
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	3302      	adds	r3, #2
 80025f2:	8819      	ldrh	r1, [r3, #0]
 80025f4:	79fa      	ldrb	r2, [r7, #7]
 80025f6:	4e37      	ldr	r6, [pc, #220]	; (80026d4 <box_rec+0x1e4>)
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4433      	add	r3, r6
 8002602:	3304      	adds	r3, #4
 8002604:	881b      	ldrh	r3, [r3, #0]
	lcd_DrawRectangle(
 8002606:	440b      	add	r3, r1
 8002608:	b299      	uxth	r1, r3
 800260a:	79fa      	ldrb	r2, [r7, #7]
 800260c:	4e31      	ldr	r6, [pc, #196]	; (80026d4 <box_rec+0x1e4>)
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4433      	add	r3, r6
 8002618:	3308      	adds	r3, #8
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	460b      	mov	r3, r1
 8002620:	462a      	mov	r2, r5
 8002622:	4621      	mov	r1, r4
 8002624:	f7ff fae3 	bl	8001bee <lcd_DrawRectangle>
		BOX[box_idx].COLOR_EDGE
	);

	if (BOX[box_idx].is_fill) {
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	492a      	ldr	r1, [pc, #168]	; (80026d4 <box_rec+0x1e4>)
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	440b      	add	r3, r1
 8002636:	330c      	adds	r3, #12
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d046      	beq.n	80026cc <box_rec+0x1dc>
		lcd_Fill(
 800263e:	79fa      	ldrb	r2, [r7, #7]
 8002640:	4924      	ldr	r1, [pc, #144]	; (80026d4 <box_rec+0x1e4>)
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	8818      	ldrh	r0, [r3, #0]
 800264e:	79fa      	ldrb	r2, [r7, #7]
 8002650:	4920      	ldr	r1, [pc, #128]	; (80026d4 <box_rec+0x1e4>)
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	440b      	add	r3, r1
 800265c:	3302      	adds	r3, #2
 800265e:	881c      	ldrh	r4, [r3, #0]
			BOX[box_idx].X, BOX[box_idx].Y,
			BOX[box_idx].X + BOX[box_idx].width,
 8002660:	79fa      	ldrb	r2, [r7, #7]
 8002662:	491c      	ldr	r1, [pc, #112]	; (80026d4 <box_rec+0x1e4>)
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	8819      	ldrh	r1, [r3, #0]
 8002670:	79fa      	ldrb	r2, [r7, #7]
 8002672:	4d18      	ldr	r5, [pc, #96]	; (80026d4 <box_rec+0x1e4>)
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	442b      	add	r3, r5
 800267e:	3306      	adds	r3, #6
 8002680:	881b      	ldrh	r3, [r3, #0]
		lcd_Fill(
 8002682:	440b      	add	r3, r1
 8002684:	b29d      	uxth	r5, r3
			BOX[box_idx].Y + BOX[box_idx].height, BOX[box_idx].COLOR_FILL
 8002686:	79fa      	ldrb	r2, [r7, #7]
 8002688:	4912      	ldr	r1, [pc, #72]	; (80026d4 <box_rec+0x1e4>)
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	440b      	add	r3, r1
 8002694:	3302      	adds	r3, #2
 8002696:	8819      	ldrh	r1, [r3, #0]
 8002698:	79fa      	ldrb	r2, [r7, #7]
 800269a:	4e0e      	ldr	r6, [pc, #56]	; (80026d4 <box_rec+0x1e4>)
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4433      	add	r3, r6
 80026a6:	3304      	adds	r3, #4
 80026a8:	881b      	ldrh	r3, [r3, #0]
		lcd_Fill(
 80026aa:	440b      	add	r3, r1
 80026ac:	b299      	uxth	r1, r3
 80026ae:	79fa      	ldrb	r2, [r7, #7]
 80026b0:	4e08      	ldr	r6, [pc, #32]	; (80026d4 <box_rec+0x1e4>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4433      	add	r3, r6
 80026bc:	330a      	adds	r3, #10
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	460b      	mov	r3, r1
 80026c4:	462a      	mov	r2, r5
 80026c6:	4621      	mov	r1, r4
 80026c8:	f7ff f9c0 	bl	8001a4c <lcd_Fill>
		);
	}
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d4:	20000144 	.word	0x20000144

080026d8 <init_traffic_light>:
/*
 * @brief:	function to init traffic light
 * @para:	none
 * @retval:	none
 */
void init_traffic_light(void) {
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	b085      	sub	sp, #20
 80026dc:	af04      	add	r7, sp, #16
/* ============================ START horizontal ============================ */
	traffic_horizontal.x 					= 40;
 80026de:	4b59      	ldr	r3, [pc, #356]	; (8002844 <init_traffic_light+0x16c>)
 80026e0:	2228      	movs	r2, #40	; 0x28
 80026e2:	801a      	strh	r2, [r3, #0]
	traffic_horizontal.y 					= 60;
 80026e4:	4b57      	ldr	r3, [pc, #348]	; (8002844 <init_traffic_light+0x16c>)
 80026e6:	223c      	movs	r2, #60	; 0x3c
 80026e8:	805a      	strh	r2, [r3, #2]
	traffic_horizontal.width 			= 120;
 80026ea:	4b56      	ldr	r3, [pc, #344]	; (8002844 <init_traffic_light+0x16c>)
 80026ec:	2278      	movs	r2, #120	; 0x78
 80026ee:	80da      	strh	r2, [r3, #6]
	traffic_horizontal.height 		= 40;
 80026f0:	4b54      	ldr	r3, [pc, #336]	; (8002844 <init_traffic_light+0x16c>)
 80026f2:	2228      	movs	r2, #40	; 0x28
 80026f4:	809a      	strh	r2, [r3, #4]
	traffic_horizontal.COLOR_FILL = BLACK;
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <init_traffic_light+0x16c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	811a      	strh	r2, [r3, #8]

	//draw a black box
	lcd_DrawRectangle(
 80026fc:	4b51      	ldr	r3, [pc, #324]	; (8002844 <init_traffic_light+0x16c>)
 80026fe:	8818      	ldrh	r0, [r3, #0]
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <init_traffic_light+0x16c>)
 8002702:	8859      	ldrh	r1, [r3, #2]
		traffic_horizontal.x, traffic_horizontal.y,
		traffic_horizontal.x + traffic_horizontal.width, traffic_horizontal.y + traffic_horizontal.height,
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <init_traffic_light+0x16c>)
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <init_traffic_light+0x16c>)
 800270a:	88db      	ldrh	r3, [r3, #6]
	lcd_DrawRectangle(
 800270c:	4413      	add	r3, r2
 800270e:	b29c      	uxth	r4, r3
		traffic_horizontal.x + traffic_horizontal.width, traffic_horizontal.y + traffic_horizontal.height,
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <init_traffic_light+0x16c>)
 8002712:	885a      	ldrh	r2, [r3, #2]
 8002714:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <init_traffic_light+0x16c>)
 8002716:	889b      	ldrh	r3, [r3, #4]
	lcd_DrawRectangle(
 8002718:	4413      	add	r3, r2
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b49      	ldr	r3, [pc, #292]	; (8002844 <init_traffic_light+0x16c>)
 800271e:	891b      	ldrh	r3, [r3, #8]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	4622      	mov	r2, r4
 8002726:	f7ff fa62 	bl	8001bee <lcd_DrawRectangle>
		traffic_horizontal.COLOR_FILL
	);
	lcd_Fill(
 800272a:	4b46      	ldr	r3, [pc, #280]	; (8002844 <init_traffic_light+0x16c>)
 800272c:	8818      	ldrh	r0, [r3, #0]
 800272e:	4b45      	ldr	r3, [pc, #276]	; (8002844 <init_traffic_light+0x16c>)
 8002730:	8859      	ldrh	r1, [r3, #2]
		traffic_horizontal.x, traffic_horizontal.y,
		traffic_horizontal.x + traffic_horizontal.width, traffic_horizontal.y + traffic_horizontal.height,
 8002732:	4b44      	ldr	r3, [pc, #272]	; (8002844 <init_traffic_light+0x16c>)
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <init_traffic_light+0x16c>)
 8002738:	88db      	ldrh	r3, [r3, #6]
	lcd_Fill(
 800273a:	4413      	add	r3, r2
 800273c:	b29c      	uxth	r4, r3
		traffic_horizontal.x + traffic_horizontal.width, traffic_horizontal.y + traffic_horizontal.height,
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <init_traffic_light+0x16c>)
 8002740:	885a      	ldrh	r2, [r3, #2]
 8002742:	4b40      	ldr	r3, [pc, #256]	; (8002844 <init_traffic_light+0x16c>)
 8002744:	889b      	ldrh	r3, [r3, #4]
	lcd_Fill(
 8002746:	4413      	add	r3, r2
 8002748:	b29a      	uxth	r2, r3
 800274a:	4b3e      	ldr	r3, [pc, #248]	; (8002844 <init_traffic_light+0x16c>)
 800274c:	891b      	ldrh	r3, [r3, #8]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	4622      	mov	r2, r4
 8002754:	f7ff f97a 	bl	8001a4c <lcd_Fill>
		traffic_horizontal.COLOR_FILL
	);

	//calculate center and radius of each light inside above black box
	traffic_horizontal.red.center_x 		= traffic_horizontal.x + traffic_horizontal.width / 6;
 8002758:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <init_traffic_light+0x16c>)
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	4b39      	ldr	r3, [pc, #228]	; (8002844 <init_traffic_light+0x16c>)
 800275e:	88db      	ldrh	r3, [r3, #6]
 8002760:	4939      	ldr	r1, [pc, #228]	; (8002848 <init_traffic_light+0x170>)
 8002762:	fba1 1303 	umull	r1, r3, r1, r3
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	b29b      	uxth	r3, r3
 800276a:	4413      	add	r3, r2
 800276c:	b29a      	uxth	r2, r3
 800276e:	4b35      	ldr	r3, [pc, #212]	; (8002844 <init_traffic_light+0x16c>)
 8002770:	815a      	strh	r2, [r3, #10]
	traffic_horizontal.yellow.center_x 	= traffic_horizontal.x + 3 * traffic_horizontal.width / 6;
 8002772:	4b34      	ldr	r3, [pc, #208]	; (8002844 <init_traffic_light+0x16c>)
 8002774:	881a      	ldrh	r2, [r3, #0]
 8002776:	4b33      	ldr	r3, [pc, #204]	; (8002844 <init_traffic_light+0x16c>)
 8002778:	88db      	ldrh	r3, [r3, #6]
 800277a:	0fd9      	lsrs	r1, r3, #31
 800277c:	440b      	add	r3, r1
 800277e:	105b      	asrs	r3, r3, #1
 8002780:	b29b      	uxth	r3, r3
 8002782:	4413      	add	r3, r2
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <init_traffic_light+0x16c>)
 8002788:	829a      	strh	r2, [r3, #20]
	traffic_horizontal.green.center_x 	= traffic_horizontal.x + 5 * traffic_horizontal.width / 6;
 800278a:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <init_traffic_light+0x16c>)
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <init_traffic_light+0x16c>)
 8002790:	88db      	ldrh	r3, [r3, #6]
 8002792:	4619      	mov	r1, r3
 8002794:	460b      	mov	r3, r1
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	492c      	ldr	r1, [pc, #176]	; (800284c <init_traffic_light+0x174>)
 800279c:	fb81 0103 	smull	r0, r1, r1, r3
 80027a0:	17db      	asrs	r3, r3, #31
 80027a2:	1acb      	subs	r3, r1, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <init_traffic_light+0x16c>)
 80027ac:	83da      	strh	r2, [r3, #30]

	traffic_horizontal.red.center_y 		= traffic_horizontal.y + traffic_horizontal.height / 2;
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <init_traffic_light+0x16c>)
 80027b0:	885a      	ldrh	r2, [r3, #2]
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <init_traffic_light+0x16c>)
 80027b4:	889b      	ldrh	r3, [r3, #4]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <init_traffic_light+0x16c>)
 80027c0:	819a      	strh	r2, [r3, #12]
	traffic_horizontal.yellow.center_y 	= traffic_horizontal.red.center_y;
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <init_traffic_light+0x16c>)
 80027c4:	899a      	ldrh	r2, [r3, #12]
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <init_traffic_light+0x16c>)
 80027c8:	82da      	strh	r2, [r3, #22]
	traffic_horizontal.green.center_y 	= traffic_horizontal.red.center_y;
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <init_traffic_light+0x16c>)
 80027cc:	899a      	ldrh	r2, [r3, #12]
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <init_traffic_light+0x16c>)
 80027d0:	841a      	strh	r2, [r3, #32]

	traffic_horizontal.red.radius 			= (traffic_horizontal.height / 2)  * 90 / 100 ;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <init_traffic_light+0x16c>)
 80027d4:	889b      	ldrh	r3, [r3, #4]
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	235a      	movs	r3, #90	; 0x5a
 80027de:	fb03 f302 	mul.w	r3, r3, r2
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <init_traffic_light+0x178>)
 80027e4:	fb82 1203 	smull	r1, r2, r2, r3
 80027e8:	1152      	asrs	r2, r2, #5
 80027ea:	17db      	asrs	r3, r3, #31
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <init_traffic_light+0x16c>)
 80027f2:	821a      	strh	r2, [r3, #16]
	traffic_horizontal.yellow.radius 		= traffic_horizontal.red.radius;
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <init_traffic_light+0x16c>)
 80027f6:	8a1a      	ldrh	r2, [r3, #16]
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <init_traffic_light+0x16c>)
 80027fa:	835a      	strh	r2, [r3, #26]
	traffic_horizontal.green.radius 		= traffic_horizontal.red.radius;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <init_traffic_light+0x16c>)
 80027fe:	8a1a      	ldrh	r2, [r3, #16]
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <init_traffic_light+0x16c>)
 8002802:	849a      	strh	r2, [r3, #36]	; 0x24

	traffic_horizontal.red.is_fill = 1;
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <init_traffic_light+0x16c>)
 8002806:	2201      	movs	r2, #1
 8002808:	749a      	strb	r2, [r3, #18]

	traffic_horizontal.red.COLOR_FILL 		= (traffic_horizontal.red.is_fill) ? RED : BLACK;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <init_traffic_light+0x16c>)
 800280c:	7c9b      	ldrb	r3, [r3, #18]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <init_traffic_light+0x140>
 8002812:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002816:	e000      	b.n	800281a <init_traffic_light+0x142>
 8002818:	2200      	movs	r2, #0
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <init_traffic_light+0x16c>)
 800281c:	81da      	strh	r2, [r3, #14]
	traffic_horizontal.yellow.COLOR_FILL 	= (traffic_horizontal.yellow.is_fill) ? YELLOW : BLACK;
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <init_traffic_light+0x16c>)
 8002820:	7f1b      	ldrb	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <init_traffic_light+0x154>
 8002826:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800282a:	e000      	b.n	800282e <init_traffic_light+0x156>
 800282c:	2200      	movs	r2, #0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <init_traffic_light+0x16c>)
 8002830:	831a      	strh	r2, [r3, #24]
	traffic_horizontal.green.COLOR_FILL 	= (traffic_horizontal.green.is_fill) ? GREEN : BLACK;
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <init_traffic_light+0x16c>)
 8002834:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <init_traffic_light+0x17c>
 800283c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002840:	e009      	b.n	8002856 <init_traffic_light+0x17e>
 8002842:	bf00      	nop
 8002844:	2000018c 	.word	0x2000018c
 8002848:	aaaaaaab 	.word	0xaaaaaaab
 800284c:	2aaaaaab 	.word	0x2aaaaaab
 8002850:	51eb851f 	.word	0x51eb851f
 8002854:	2200      	movs	r2, #0
 8002856:	4b96      	ldr	r3, [pc, #600]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002858:	845a      	strh	r2, [r3, #34]	; 0x22

	lcd_DrawCircle(traffic_horizontal.red.center_x, traffic_horizontal.red.center_y, traffic_horizontal.red.COLOR_FILL, traffic_horizontal.red.radius, traffic_horizontal.red.is_fill);
 800285a:	4b95      	ldr	r3, [pc, #596]	; (8002ab0 <init_traffic_light+0x3d8>)
 800285c:	895b      	ldrh	r3, [r3, #10]
 800285e:	4618      	mov	r0, r3
 8002860:	4b93      	ldr	r3, [pc, #588]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002862:	899b      	ldrh	r3, [r3, #12]
 8002864:	4619      	mov	r1, r3
 8002866:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002868:	89da      	ldrh	r2, [r3, #14]
 800286a:	4b91      	ldr	r3, [pc, #580]	; (8002ab0 <init_traffic_light+0x3d8>)
 800286c:	8a1b      	ldrh	r3, [r3, #16]
 800286e:	461c      	mov	r4, r3
 8002870:	4b8f      	ldr	r3, [pc, #572]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002872:	7c9b      	ldrb	r3, [r3, #18]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4623      	mov	r3, r4
 8002878:	f7ff fd69 	bl	800234e <lcd_DrawCircle>
	lcd_DrawCircle(traffic_horizontal.yellow.center_x, traffic_horizontal.yellow.center_y, traffic_horizontal.yellow.COLOR_FILL, traffic_horizontal.yellow.radius, traffic_horizontal.yellow.is_fill);
 800287c:	4b8c      	ldr	r3, [pc, #560]	; (8002ab0 <init_traffic_light+0x3d8>)
 800287e:	8a9b      	ldrh	r3, [r3, #20]
 8002880:	4618      	mov	r0, r3
 8002882:	4b8b      	ldr	r3, [pc, #556]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002884:	8adb      	ldrh	r3, [r3, #22]
 8002886:	4619      	mov	r1, r3
 8002888:	4b89      	ldr	r3, [pc, #548]	; (8002ab0 <init_traffic_light+0x3d8>)
 800288a:	8b1a      	ldrh	r2, [r3, #24]
 800288c:	4b88      	ldr	r3, [pc, #544]	; (8002ab0 <init_traffic_light+0x3d8>)
 800288e:	8b5b      	ldrh	r3, [r3, #26]
 8002890:	461c      	mov	r4, r3
 8002892:	4b87      	ldr	r3, [pc, #540]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002894:	7f1b      	ldrb	r3, [r3, #28]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4623      	mov	r3, r4
 800289a:	f7ff fd58 	bl	800234e <lcd_DrawCircle>
	lcd_DrawCircle(traffic_horizontal.green.center_x, traffic_horizontal.green.center_y, traffic_horizontal.green.COLOR_FILL, traffic_horizontal.green.radius, traffic_horizontal.green.is_fill);
 800289e:	4b84      	ldr	r3, [pc, #528]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028a0:	8bdb      	ldrh	r3, [r3, #30]
 80028a2:	4618      	mov	r0, r3
 80028a4:	4b82      	ldr	r3, [pc, #520]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028a6:	8c1b      	ldrh	r3, [r3, #32]
 80028a8:	4619      	mov	r1, r3
 80028aa:	4b81      	ldr	r3, [pc, #516]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028ac:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80028ae:	4b80      	ldr	r3, [pc, #512]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028b2:	461c      	mov	r4, r3
 80028b4:	4b7e      	ldr	r3, [pc, #504]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4623      	mov	r3, r4
 80028be:	f7ff fd46 	bl	800234e <lcd_DrawCircle>

	//init num
	traffic_horizontal.num.len 		= 2;
 80028c2:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	traffic_horizontal.num.fc 		= BLACK;
 80028ca:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	861a      	strh	r2, [r3, #48]	; 0x30
	traffic_horizontal.num.bc 		= WHITE;
 80028d0:	4b77      	ldr	r3, [pc, #476]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028d6:	865a      	strh	r2, [r3, #50]	; 0x32
	traffic_horizontal.num.sizey 	= 32;
 80028d8:	4b75      	ldr	r3, [pc, #468]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	traffic_horizontal.num.x 			= traffic_horizontal.x - traffic_horizontal.num.len * traffic_horizontal.num.sizey / 2;
 80028e0:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028e2:	881a      	ldrh	r2, [r3, #0]
 80028e4:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028e6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80028ea:	4619      	mov	r1, r3
 80028ec:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <init_traffic_light+0x3d8>)
 80028ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028f2:	fb03 f301 	mul.w	r3, r3, r1
 80028f6:	0fd9      	lsrs	r1, r3, #31
 80028f8:	440b      	add	r3, r1
 80028fa:	105b      	asrs	r3, r3, #1
 80028fc:	425b      	negs	r3, r3
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4413      	add	r3, r2
 8002902:	b29a      	uxth	r2, r3
 8002904:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
	traffic_horizontal.num.y 			= traffic_horizontal.y;
 8002908:	4b69      	ldr	r3, [pc, #420]	; (8002ab0 <init_traffic_light+0x3d8>)
 800290a:	885a      	ldrh	r2, [r3, #2]
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <init_traffic_light+0x3d8>)
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
	traffic_horizontal.num.num 		= 10;
 8002910:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002912:	220a      	movs	r2, #10
 8002914:	859a      	strh	r2, [r3, #44]	; 0x2c
	lcd_ShowIntNum(traffic_horizontal.num.x, traffic_horizontal.num.y, traffic_horizontal.num.num, traffic_horizontal.num.len, traffic_horizontal.num.fc, traffic_horizontal.num.bc, traffic_horizontal.num.sizey);
 8002916:	4b66      	ldr	r3, [pc, #408]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002918:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <init_traffic_light+0x3d8>)
 800291c:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 800291e:	4b64      	ldr	r3, [pc, #400]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002920:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002924:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002928:	4b61      	ldr	r3, [pc, #388]	; (8002ab0 <init_traffic_light+0x3d8>)
 800292a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800292c:	4a60      	ldr	r2, [pc, #384]	; (8002ab0 <init_traffic_light+0x3d8>)
 800292e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002930:	495f      	ldr	r1, [pc, #380]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002932:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002936:	9102      	str	r1, [sp, #8]
 8002938:	9201      	str	r2, [sp, #4]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4633      	mov	r3, r6
 800293e:	462a      	mov	r2, r5
 8002940:	4621      	mov	r1, r4
 8002942:	f7ff fa77 	bl	8001e34 <lcd_ShowIntNum>
/* ============================= END horizontal ============================= */


/* ============================= START vertical ============================= */
	traffic_vertical.x 					= 180;
 8002946:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002948:	22b4      	movs	r2, #180	; 0xb4
 800294a:	801a      	strh	r2, [r3, #0]
	traffic_vertical.y 					= 120;
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <init_traffic_light+0x3dc>)
 800294e:	2278      	movs	r2, #120	; 0x78
 8002950:	805a      	strh	r2, [r3, #2]
	traffic_vertical.width 			= traffic_horizontal.height;
 8002952:	4b57      	ldr	r3, [pc, #348]	; (8002ab0 <init_traffic_light+0x3d8>)
 8002954:	889a      	ldrh	r2, [r3, #4]
 8002956:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002958:	80da      	strh	r2, [r3, #6]
	traffic_vertical.height 		= traffic_horizontal.width;
 800295a:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <init_traffic_light+0x3d8>)
 800295c:	88da      	ldrh	r2, [r3, #6]
 800295e:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002960:	809a      	strh	r2, [r3, #4]
	traffic_vertical.COLOR_FILL = BLACK;
 8002962:	4b54      	ldr	r3, [pc, #336]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002964:	2200      	movs	r2, #0
 8002966:	811a      	strh	r2, [r3, #8]

	// draw a black box
	lcd_DrawRectangle(
 8002968:	4b52      	ldr	r3, [pc, #328]	; (8002ab4 <init_traffic_light+0x3dc>)
 800296a:	8818      	ldrh	r0, [r3, #0]
 800296c:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <init_traffic_light+0x3dc>)
 800296e:	8859      	ldrh	r1, [r3, #2]
		traffic_vertical.x, traffic_vertical.y,
		traffic_vertical.x + traffic_vertical.width, traffic_vertical.y + traffic_vertical.height, 
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002972:	881a      	ldrh	r2, [r3, #0]
 8002974:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002976:	88db      	ldrh	r3, [r3, #6]
	lcd_DrawRectangle(
 8002978:	4413      	add	r3, r2
 800297a:	b29c      	uxth	r4, r3
		traffic_vertical.x + traffic_vertical.width, traffic_vertical.y + traffic_vertical.height, 
 800297c:	4b4d      	ldr	r3, [pc, #308]	; (8002ab4 <init_traffic_light+0x3dc>)
 800297e:	885a      	ldrh	r2, [r3, #2]
 8002980:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002982:	889b      	ldrh	r3, [r3, #4]
	lcd_DrawRectangle(
 8002984:	4413      	add	r3, r2
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <init_traffic_light+0x3dc>)
 800298a:	891b      	ldrh	r3, [r3, #8]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	4622      	mov	r2, r4
 8002992:	f7ff f92c 	bl	8001bee <lcd_DrawRectangle>
		traffic_vertical.COLOR_FILL
	);
	lcd_Fill(
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002998:	8818      	ldrh	r0, [r3, #0]
 800299a:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <init_traffic_light+0x3dc>)
 800299c:	8859      	ldrh	r1, [r3, #2]
		traffic_vertical.x, traffic_vertical.y, 
		traffic_vertical.x + traffic_vertical.width, traffic_vertical.y + traffic_vertical.height, 
 800299e:	4b45      	ldr	r3, [pc, #276]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029a4:	88db      	ldrh	r3, [r3, #6]
	lcd_Fill(
 80029a6:	4413      	add	r3, r2
 80029a8:	b29c      	uxth	r4, r3
		traffic_vertical.x + traffic_vertical.width, traffic_vertical.y + traffic_vertical.height, 
 80029aa:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029ac:	885a      	ldrh	r2, [r3, #2]
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029b0:	889b      	ldrh	r3, [r3, #4]
	lcd_Fill(
 80029b2:	4413      	add	r3, r2
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029b8:	891b      	ldrh	r3, [r3, #8]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	4622      	mov	r2, r4
 80029c0:	f7ff f844 	bl	8001a4c <lcd_Fill>
		traffic_vertical.COLOR_FILL
	);

	// calculate center and radius of each light inside above black box
	traffic_vertical.red.center_y 		= traffic_vertical.y + traffic_vertical.height / 6;
 80029c4:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029c6:	885a      	ldrh	r2, [r3, #2]
 80029c8:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029ca:	889b      	ldrh	r3, [r3, #4]
 80029cc:	493a      	ldr	r1, [pc, #232]	; (8002ab8 <init_traffic_light+0x3e0>)
 80029ce:	fba1 1303 	umull	r1, r3, r1, r3
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	b29a      	uxth	r2, r3
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029dc:	819a      	strh	r2, [r3, #12]
	traffic_vertical.yellow.center_y 	= traffic_vertical.y + 3 * traffic_vertical.height / 6;
 80029de:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029e0:	885a      	ldrh	r2, [r3, #2]
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029e4:	889b      	ldrh	r3, [r3, #4]
 80029e6:	0fd9      	lsrs	r1, r3, #31
 80029e8:	440b      	add	r3, r1
 80029ea:	105b      	asrs	r3, r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029f4:	82da      	strh	r2, [r3, #22]
	traffic_vertical.green.center_y 	= traffic_vertical.y + 5 * traffic_vertical.height / 6;
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029f8:	885a      	ldrh	r2, [r3, #2]
 80029fa:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <init_traffic_light+0x3dc>)
 80029fc:	889b      	ldrh	r3, [r3, #4]
 80029fe:	4619      	mov	r1, r3
 8002a00:	460b      	mov	r3, r1
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	492d      	ldr	r1, [pc, #180]	; (8002abc <init_traffic_light+0x3e4>)
 8002a08:	fb81 0103 	smull	r0, r1, r1, r3
 8002a0c:	17db      	asrs	r3, r3, #31
 8002a0e:	1acb      	subs	r3, r1, r3
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a18:	841a      	strh	r2, [r3, #32]

	traffic_vertical.red.center_x 		= traffic_vertical.x + traffic_vertical.width / 2;
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a20:	88db      	ldrh	r3, [r3, #6]
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a2c:	815a      	strh	r2, [r3, #10]
	traffic_vertical.yellow.center_x 	= traffic_vertical.red.center_x;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a30:	895a      	ldrh	r2, [r3, #10]
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a34:	829a      	strh	r2, [r3, #20]
	traffic_vertical.green.center_x 	= traffic_vertical.red.center_x;
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a38:	895a      	ldrh	r2, [r3, #10]
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a3c:	83da      	strh	r2, [r3, #30]

	traffic_vertical.red.radius 			= (traffic_vertical.width / 2)  * 90 / 100 ;
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a40:	88db      	ldrh	r3, [r3, #6]
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	235a      	movs	r3, #90	; 0x5a
 8002a4a:	fb03 f302 	mul.w	r3, r3, r2
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <init_traffic_light+0x3e8>)
 8002a50:	fb82 1203 	smull	r1, r2, r2, r3
 8002a54:	1152      	asrs	r2, r2, #5
 8002a56:	17db      	asrs	r3, r3, #31
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a5e:	821a      	strh	r2, [r3, #16]
	traffic_vertical.yellow.radius 		= traffic_vertical.red.radius;
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a62:	8a1a      	ldrh	r2, [r3, #16]
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a66:	835a      	strh	r2, [r3, #26]
	traffic_vertical.green.radius 		= traffic_vertical.red.radius;
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a6a:	8a1a      	ldrh	r2, [r3, #16]
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a6e:	849a      	strh	r2, [r3, #36]	; 0x24

	traffic_vertical.red.is_fill = 1;
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	749a      	strb	r2, [r3, #18]

	traffic_vertical.red.COLOR_FILL 		= (traffic_vertical.red.is_fill) ? RED : BLACK;
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a78:	7c9b      	ldrb	r3, [r3, #18]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <init_traffic_light+0x3ac>
 8002a7e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a82:	e000      	b.n	8002a86 <init_traffic_light+0x3ae>
 8002a84:	2200      	movs	r2, #0
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a88:	81da      	strh	r2, [r3, #14]
	traffic_vertical.yellow.COLOR_FILL 	= (traffic_vertical.yellow.is_fill) ? YELLOW : BLACK;
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a8c:	7f1b      	ldrb	r3, [r3, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <init_traffic_light+0x3c0>
 8002a92:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a96:	e000      	b.n	8002a9a <init_traffic_light+0x3c2>
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002a9c:	831a      	strh	r2, [r3, #24]
	traffic_vertical.green.COLOR_FILL 	= (traffic_vertical.green.is_fill) ? GREEN : BLACK;
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <init_traffic_light+0x3dc>)
 8002aa0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <init_traffic_light+0x3ec>
 8002aa8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002aac:	e00b      	b.n	8002ac6 <init_traffic_light+0x3ee>
 8002aae:	bf00      	nop
 8002ab0:	2000018c 	.word	0x2000018c
 8002ab4:	2000010c 	.word	0x2000010c
 8002ab8:	aaaaaaab 	.word	0xaaaaaaab
 8002abc:	2aaaaaab 	.word	0x2aaaaaab
 8002ac0:	51eb851f 	.word	0x51eb851f
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4b39      	ldr	r3, [pc, #228]	; (8002bac <init_traffic_light+0x4d4>)
 8002ac8:	845a      	strh	r2, [r3, #34]	; 0x22

	lcd_DrawCircle(traffic_vertical.red.center_x, traffic_vertical.red.center_y, traffic_vertical.red.COLOR_FILL, traffic_vertical.red.radius, traffic_vertical.red.is_fill);
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <init_traffic_light+0x4d4>)
 8002acc:	895b      	ldrh	r3, [r3, #10]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	4b36      	ldr	r3, [pc, #216]	; (8002bac <init_traffic_light+0x4d4>)
 8002ad2:	899b      	ldrh	r3, [r3, #12]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4b35      	ldr	r3, [pc, #212]	; (8002bac <init_traffic_light+0x4d4>)
 8002ad8:	89da      	ldrh	r2, [r3, #14]
 8002ada:	4b34      	ldr	r3, [pc, #208]	; (8002bac <init_traffic_light+0x4d4>)
 8002adc:	8a1b      	ldrh	r3, [r3, #16]
 8002ade:	461c      	mov	r4, r3
 8002ae0:	4b32      	ldr	r3, [pc, #200]	; (8002bac <init_traffic_light+0x4d4>)
 8002ae2:	7c9b      	ldrb	r3, [r3, #18]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	f7ff fc31 	bl	800234e <lcd_DrawCircle>
	lcd_DrawCircle(traffic_vertical.yellow.center_x, traffic_vertical.yellow.center_y, traffic_vertical.yellow.COLOR_FILL, traffic_vertical.yellow.radius, traffic_vertical.yellow.is_fill);
 8002aec:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <init_traffic_light+0x4d4>)
 8002aee:	8a9b      	ldrh	r3, [r3, #20]
 8002af0:	4618      	mov	r0, r3
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <init_traffic_light+0x4d4>)
 8002af4:	8adb      	ldrh	r3, [r3, #22]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <init_traffic_light+0x4d4>)
 8002afa:	8b1a      	ldrh	r2, [r3, #24]
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <init_traffic_light+0x4d4>)
 8002afe:	8b5b      	ldrh	r3, [r3, #26]
 8002b00:	461c      	mov	r4, r3
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <init_traffic_light+0x4d4>)
 8002b04:	7f1b      	ldrb	r3, [r3, #28]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	4623      	mov	r3, r4
 8002b0a:	f7ff fc20 	bl	800234e <lcd_DrawCircle>
	lcd_DrawCircle(traffic_vertical.green.center_x, traffic_vertical.green.center_y, traffic_vertical.green.COLOR_FILL, traffic_vertical.green.radius, traffic_vertical.green.is_fill);
 8002b0e:	4b27      	ldr	r3, [pc, #156]	; (8002bac <init_traffic_light+0x4d4>)
 8002b10:	8bdb      	ldrh	r3, [r3, #30]
 8002b12:	4618      	mov	r0, r3
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <init_traffic_light+0x4d4>)
 8002b16:	8c1b      	ldrh	r3, [r3, #32]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <init_traffic_light+0x4d4>)
 8002b1c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <init_traffic_light+0x4d4>)
 8002b20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b22:	461c      	mov	r4, r3
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <init_traffic_light+0x4d4>)
 8002b26:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	f7ff fc0e 	bl	800234e <lcd_DrawCircle>

	// init num
	traffic_vertical.num.len 		= 2;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <init_traffic_light+0x4d4>)
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	traffic_vertical.num.fc 		= BLACK;
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <init_traffic_light+0x4d4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	861a      	strh	r2, [r3, #48]	; 0x30
	traffic_vertical.num.bc 		= WHITE;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <init_traffic_light+0x4d4>)
 8002b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b46:	865a      	strh	r2, [r3, #50]	; 0x32
	traffic_vertical.num.sizey 	= 32;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <init_traffic_light+0x4d4>)
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	traffic_vertical.num.x 			= traffic_vertical.x;
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <init_traffic_light+0x4d4>)
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	4b15      	ldr	r3, [pc, #84]	; (8002bac <init_traffic_light+0x4d4>)
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
	traffic_vertical.num.y 			= traffic_vertical.y - traffic_vertical.num.sizey;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <init_traffic_light+0x4d4>)
 8002b5a:	885a      	ldrh	r2, [r3, #2]
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <init_traffic_light+0x4d4>)
 8002b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <init_traffic_light+0x4d4>)
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
	traffic_vertical.num.num 		= 99;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <init_traffic_light+0x4d4>)
 8002b6e:	2263      	movs	r2, #99	; 0x63
 8002b70:	859a      	strh	r2, [r3, #44]	; 0x2c
	lcd_ShowIntNum(traffic_vertical.num.x, traffic_vertical.num.y, traffic_vertical.num.num, traffic_vertical.num.len, traffic_vertical.num.fc, traffic_vertical.num.bc, traffic_vertical.num.sizey);
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <init_traffic_light+0x4d4>)
 8002b74:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <init_traffic_light+0x4d4>)
 8002b78:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <init_traffic_light+0x4d4>)
 8002b7c:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <init_traffic_light+0x4d4>)
 8002b80:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <init_traffic_light+0x4d4>)
 8002b86:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b88:	4a08      	ldr	r2, [pc, #32]	; (8002bac <init_traffic_light+0x4d4>)
 8002b8a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <init_traffic_light+0x4d4>)
 8002b8e:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002b92:	9102      	str	r1, [sp, #8]
 8002b94:	9201      	str	r2, [sp, #4]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4633      	mov	r3, r6
 8002b9a:	462a      	mov	r2, r5
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	f7ff f949 	bl	8001e34 <lcd_ShowIntNum>
/* ============================== END vertical ============================== */
}
 8002ba2:	bf00      	nop
 8002ba4:	3704      	adds	r7, #4
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000010c 	.word	0x2000010c

08002bb0 <control_traffic_light>:
/*
 * @brief: 	display traffic light function
 * @para:	i - id of traffic light(0: WE, 1: NS)
 * 			red, yellow, green - state of red, yellow and green led (1: on, 0: off)
 * @retval:	none*/
void control_traffic_light(uint8_t i, uint8_t red, uint8_t yellow, uint8_t green){
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	71fb      	strb	r3, [r7, #7]
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71bb      	strb	r3, [r7, #6]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	717b      	strb	r3, [r7, #5]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	713b      	strb	r3, [r7, #4]
	if(i == 0){
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d151      	bne.n	8002c78 <control_traffic_light+0xc8>
		//draw red
		if(!red){
 8002bd4:	79bb      	ldrb	r3, [r7, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <control_traffic_light+0x32>
			traffic_horizontal.red.COLOR_FILL = BLACK;
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <control_traffic_light+0x174>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	81da      	strh	r2, [r3, #14]
 8002be0:	e003      	b.n	8002bea <control_traffic_light+0x3a>
		}
		else{
			traffic_horizontal.red.COLOR_FILL = RED;
 8002be2:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <control_traffic_light+0x174>)
 8002be4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002be8:	81da      	strh	r2, [r3, #14]
		}
		if(!yellow){
 8002bea:	797b      	ldrb	r3, [r7, #5]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <control_traffic_light+0x48>
			traffic_horizontal.yellow.COLOR_FILL = BLACK;
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <control_traffic_light+0x174>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	831a      	strh	r2, [r3, #24]
 8002bf6:	e003      	b.n	8002c00 <control_traffic_light+0x50>
		}
		else{
			traffic_horizontal.yellow.COLOR_FILL = YELLOW;
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <control_traffic_light+0x174>)
 8002bfa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002bfe:	831a      	strh	r2, [r3, #24]
		}
		if(!green){
 8002c00:	793b      	ldrb	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <control_traffic_light+0x5e>
			traffic_horizontal.green.COLOR_FILL = BLACK;
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <control_traffic_light+0x174>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	845a      	strh	r2, [r3, #34]	; 0x22
 8002c0c:	e003      	b.n	8002c16 <control_traffic_light+0x66>
		}
		else{
			traffic_horizontal.green.COLOR_FILL = GREEN;
 8002c0e:	4b45      	ldr	r3, [pc, #276]	; (8002d24 <control_traffic_light+0x174>)
 8002c10:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c14:	845a      	strh	r2, [r3, #34]	; 0x22
		}
		lcd_DrawCircle(traffic_horizontal.red.center_x, traffic_horizontal.red.center_y, traffic_horizontal.red.COLOR_FILL, traffic_horizontal.red.radius, 1);
 8002c16:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <control_traffic_light+0x174>)
 8002c18:	895b      	ldrh	r3, [r3, #10]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <control_traffic_light+0x174>)
 8002c1e:	899b      	ldrh	r3, [r3, #12]
 8002c20:	4619      	mov	r1, r3
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <control_traffic_light+0x174>)
 8002c24:	89da      	ldrh	r2, [r3, #14]
 8002c26:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <control_traffic_light+0x174>)
 8002c28:	8a1b      	ldrh	r3, [r3, #16]
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4623      	mov	r3, r4
 8002c32:	f7ff fb8c 	bl	800234e <lcd_DrawCircle>
		//draw yellow
		lcd_DrawCircle(traffic_horizontal.yellow.center_x, traffic_horizontal.yellow.center_y, traffic_horizontal.yellow.COLOR_FILL, traffic_horizontal.yellow.radius, 1);
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <control_traffic_light+0x174>)
 8002c38:	8a9b      	ldrh	r3, [r3, #20]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <control_traffic_light+0x174>)
 8002c3e:	8adb      	ldrh	r3, [r3, #22]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <control_traffic_light+0x174>)
 8002c44:	8b1a      	ldrh	r2, [r3, #24]
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <control_traffic_light+0x174>)
 8002c48:	8b5b      	ldrh	r3, [r3, #26]
 8002c4a:	461c      	mov	r4, r3
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4623      	mov	r3, r4
 8002c52:	f7ff fb7c 	bl	800234e <lcd_DrawCircle>
		//draw green
		lcd_DrawCircle(traffic_horizontal.green.center_x, traffic_horizontal.green.center_y, traffic_horizontal.green.COLOR_FILL, traffic_horizontal.green.radius, 1);
 8002c56:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <control_traffic_light+0x174>)
 8002c58:	8bdb      	ldrh	r3, [r3, #30]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <control_traffic_light+0x174>)
 8002c5e:	8c1b      	ldrh	r3, [r3, #32]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <control_traffic_light+0x174>)
 8002c64:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <control_traffic_light+0x174>)
 8002c68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c6a:	461c      	mov	r4, r3
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	4623      	mov	r3, r4
 8002c72:	f7ff fb6c 	bl	800234e <lcd_DrawCircle>
		//draw yellow
		lcd_DrawCircle(traffic_vertical.yellow.center_x, traffic_vertical.yellow.center_y, traffic_vertical.yellow.COLOR_FILL, traffic_vertical.yellow.radius, 1);
		//draw green
		lcd_DrawCircle(traffic_vertical.green.center_x, traffic_vertical.green.center_y, traffic_vertical.green.COLOR_FILL, traffic_vertical.green.radius, 1);
	}
}
 8002c76:	e050      	b.n	8002d1a <control_traffic_light+0x16a>
		if(!red){
 8002c78:	79bb      	ldrb	r3, [r7, #6]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <control_traffic_light+0xd6>
			traffic_vertical.red.COLOR_FILL = BLACK;
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	; (8002d28 <control_traffic_light+0x178>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	81da      	strh	r2, [r3, #14]
 8002c84:	e003      	b.n	8002c8e <control_traffic_light+0xde>
			traffic_vertical.red.COLOR_FILL = RED;
 8002c86:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <control_traffic_light+0x178>)
 8002c88:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c8c:	81da      	strh	r2, [r3, #14]
		if(!yellow){
 8002c8e:	797b      	ldrb	r3, [r7, #5]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <control_traffic_light+0xec>
			traffic_vertical.yellow.COLOR_FILL = BLACK;
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <control_traffic_light+0x178>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	831a      	strh	r2, [r3, #24]
 8002c9a:	e003      	b.n	8002ca4 <control_traffic_light+0xf4>
			traffic_vertical.yellow.COLOR_FILL = YELLOW;
 8002c9c:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <control_traffic_light+0x178>)
 8002c9e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002ca2:	831a      	strh	r2, [r3, #24]
		if(!green){
 8002ca4:	793b      	ldrb	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <control_traffic_light+0x102>
			traffic_vertical.green.COLOR_FILL = BLACK;
 8002caa:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <control_traffic_light+0x178>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	845a      	strh	r2, [r3, #34]	; 0x22
 8002cb0:	e003      	b.n	8002cba <control_traffic_light+0x10a>
			traffic_vertical.green.COLOR_FILL = GREEN;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <control_traffic_light+0x178>)
 8002cb4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002cb8:	845a      	strh	r2, [r3, #34]	; 0x22
		lcd_DrawCircle(traffic_vertical.red.center_x, traffic_vertical.red.center_y, traffic_vertical.red.COLOR_FILL, traffic_vertical.red.radius, 1);
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <control_traffic_light+0x178>)
 8002cbc:	895b      	ldrh	r3, [r3, #10]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <control_traffic_light+0x178>)
 8002cc2:	899b      	ldrh	r3, [r3, #12]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <control_traffic_light+0x178>)
 8002cc8:	89da      	ldrh	r2, [r3, #14]
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <control_traffic_light+0x178>)
 8002ccc:	8a1b      	ldrh	r3, [r3, #16]
 8002cce:	461c      	mov	r4, r3
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	f7ff fb3a 	bl	800234e <lcd_DrawCircle>
		lcd_DrawCircle(traffic_vertical.yellow.center_x, traffic_vertical.yellow.center_y, traffic_vertical.yellow.COLOR_FILL, traffic_vertical.yellow.radius, 1);
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <control_traffic_light+0x178>)
 8002cdc:	8a9b      	ldrh	r3, [r3, #20]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <control_traffic_light+0x178>)
 8002ce2:	8adb      	ldrh	r3, [r3, #22]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <control_traffic_light+0x178>)
 8002ce8:	8b1a      	ldrh	r2, [r3, #24]
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <control_traffic_light+0x178>)
 8002cec:	8b5b      	ldrh	r3, [r3, #26]
 8002cee:	461c      	mov	r4, r3
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	f7ff fb2a 	bl	800234e <lcd_DrawCircle>
		lcd_DrawCircle(traffic_vertical.green.center_x, traffic_vertical.green.center_y, traffic_vertical.green.COLOR_FILL, traffic_vertical.green.radius, 1);
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <control_traffic_light+0x178>)
 8002cfc:	8bdb      	ldrh	r3, [r3, #30]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <control_traffic_light+0x178>)
 8002d02:	8c1b      	ldrh	r3, [r3, #32]
 8002d04:	4619      	mov	r1, r3
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <control_traffic_light+0x178>)
 8002d08:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <control_traffic_light+0x178>)
 8002d0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d0e:	461c      	mov	r4, r3
 8002d10:	2301      	movs	r3, #1
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4623      	mov	r3, r4
 8002d16:	f7ff fb1a 	bl	800234e <lcd_DrawCircle>
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2000018c 	.word	0x2000018c
 8002d28:	2000010c 	.word	0x2000010c

08002d2c <update_led_buf>:
/*
 * @brief: 	update traffic light time value and show mode function
 * @para:	val1 is value of WE time, val2 is value of NS time
 * 			mode is mode of traffic system described in the request
 * @retval:	none*/
void update_led_buf(unsigned val1, unsigned val2, unsigned mode){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af04      	add	r7, sp, #16
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
	if(mode == 4 || mode == 3 || mode == 2){
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d005      	beq.n	8002d4a <update_led_buf+0x1e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d002      	beq.n	8002d4a <update_led_buf+0x1e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d110      	bne.n	8002d6c <update_led_buf+0x40>
		lcd_ShowIntNum(140, 280, mode, 1, RED, WHITE, 32);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	2320      	movs	r3, #32
 8002d50:	9302      	str	r3, [sp, #8]
 8002d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002d64:	208c      	movs	r0, #140	; 0x8c
 8002d66:	f7ff f865 	bl	8001e34 <lcd_ShowIntNum>
 8002d6a:	e00f      	b.n	8002d8c <update_led_buf+0x60>
	}
	else{
		lcd_ShowIntNum(140, 280, mode, 1, RED, WHITE, 32);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	2320      	movs	r3, #32
 8002d72:	9302      	str	r3, [sp, #8]
 8002d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	2301      	movs	r3, #1
 8002d82:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002d86:	208c      	movs	r0, #140	; 0x8c
 8002d88:	f7ff f854 	bl	8001e34 <lcd_ShowIntNum>
	}
	traffic_horizontal.num.num = val1;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <update_led_buf+0x78>)
 8002d92:	859a      	strh	r2, [r3, #44]	; 0x2c
	traffic_vertical.num.num = val2;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <update_led_buf+0x7c>)
 8002d9a:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	2000018c 	.word	0x2000018c
 8002da8:	2000010c 	.word	0x2000010c

08002dac <LCD_DisplayNum>:

/*
 * @brief: 	display number function
 * @para:	noe
 * @retval:	none*/
void LCD_DisplayNum(){
 8002dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af04      	add	r7, sp, #16
	lcd_ShowStr(60, 280, "Mode:", RED, WHITE, 32, 0);
 8002db2:	2300      	movs	r3, #0
 8002db4:	9302      	str	r3, [sp, #8]
 8002db6:	2320      	movs	r3, #32
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <LCD_DisplayNum+0x8c>)
 8002dc6:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002dca:	203c      	movs	r0, #60	; 0x3c
 8002dcc:	f7ff fb2c 	bl	8002428 <lcd_ShowStr>
	lcd_ShowIntNum(traffic_horizontal.num.x, traffic_horizontal.num.y, traffic_horizontal.num.num, traffic_horizontal.num.len, traffic_horizontal.num.fc, traffic_horizontal.num.bc, traffic_horizontal.num.sizey);
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <LCD_DisplayNum+0x90>)
 8002dd2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <LCD_DisplayNum+0x90>)
 8002dd6:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002dd8:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <LCD_DisplayNum+0x90>)
 8002dda:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <LCD_DisplayNum+0x90>)
 8002dde:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <LCD_DisplayNum+0x90>)
 8002de4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002de6:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <LCD_DisplayNum+0x90>)
 8002de8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002dea:	4914      	ldr	r1, [pc, #80]	; (8002e3c <LCD_DisplayNum+0x90>)
 8002dec:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002df0:	9102      	str	r1, [sp, #8]
 8002df2:	9201      	str	r2, [sp, #4]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	4633      	mov	r3, r6
 8002df8:	462a      	mov	r2, r5
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	f7ff f81a 	bl	8001e34 <lcd_ShowIntNum>
	lcd_ShowIntNum(traffic_vertical.num.x, traffic_vertical.num.y, traffic_vertical.num.num, traffic_vertical.num.len, traffic_vertical.num.fc, traffic_vertical.num.bc, traffic_vertical.num.sizey);
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <LCD_DisplayNum+0x94>)
 8002e02:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <LCD_DisplayNum+0x94>)
 8002e06:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <LCD_DisplayNum+0x94>)
 8002e0a:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <LCD_DisplayNum+0x94>)
 8002e0e:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <LCD_DisplayNum+0x94>)
 8002e14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <LCD_DisplayNum+0x94>)
 8002e18:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002e1a:	4909      	ldr	r1, [pc, #36]	; (8002e40 <LCD_DisplayNum+0x94>)
 8002e1c:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002e20:	9102      	str	r1, [sp, #8]
 8002e22:	9201      	str	r2, [sp, #4]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4633      	mov	r3, r6
 8002e28:	462a      	mov	r2, r5
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	f7ff f802 	bl	8001e34 <lcd_ShowIntNum>
}
 8002e30:	bf00      	nop
 8002e32:	3704      	adds	r7, #4
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e38:	080057e4 	.word	0x080057e4
 8002e3c:	2000018c 	.word	0x2000018c
 8002e40:	2000010c 	.word	0x2000010c

08002e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e4a:	f000 fae9 	bl	8003420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e4e:	f000 f855 	bl	8002efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e52:	f7fe fc53 	bl	80016fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8002e56:	f000 fa47 	bl	80032e8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002e5a:	f000 f959 	bl	8003110 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002e5e:	f7fe fb7d 	bl	800155c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002e62:	f000 f8b5 	bl	8002fd0 <system_init>
  box_rec(0, 0, 0, 240, 50, BLACK, BLACK, 0);
 8002e66:	2300      	movs	r3, #0
 8002e68:	9303      	str	r3, [sp, #12]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	2332      	movs	r3, #50	; 0x32
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	23f0      	movs	r3, #240	; 0xf0
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7ff fb37 	bl	80024f0 <box_rec>
  box_rec(1, 0, 50, 240, 220, BLACK, RED, 0);
 8002e82:	2300      	movs	r3, #0
 8002e84:	9303      	str	r3, [sp, #12]
 8002e86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e8a:	9302      	str	r3, [sp, #8]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	23dc      	movs	r3, #220	; 0xdc
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	23f0      	movs	r3, #240	; 0xf0
 8002e96:	2232      	movs	r2, #50	; 0x32
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f7ff fb28 	bl	80024f0 <box_rec>
  box_rec(2, 0, 270, 240, 50, BLACK, BLUE, 0);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	231f      	movs	r3, #31
 8002ea6:	9302      	str	r3, [sp, #8]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	2332      	movs	r3, #50	; 0x32
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	23f0      	movs	r3, #240	; 0xf0
 8002eb2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f7ff fb19 	bl	80024f0 <box_rec>
  // lcd_ShowPicture(10, 0, 50, 50, gImage_logo);
  lcd_ShowStr(40, 20, "Traffic Light", BLACK, WHITE, 24, 1);
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	9302      	str	r3, [sp, #8]
 8002ec2:	2318      	movs	r3, #24
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <main+0xb4>)
 8002ed0:	2114      	movs	r1, #20
 8002ed2:	2028      	movs	r0, #40	; 0x28
 8002ed4:	f7ff faa8 	bl	8002428 <lcd_ShowStr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!is_timer_on(2)){
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f000 f903 	bl	80030e4 <is_timer_on>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <main+0xac>
		  set_timer(2, READ_BUTTON_TIME);
 8002ee4:	210a      	movs	r1, #10
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	f000 f89e 	bl	8003028 <set_timer>
		  button_Scan();
 8002eec:	f7fd fee2 	bl	8000cb4 <button_Scan>
	  }

    traffic_run();
 8002ef0:	f7fe f9c8 	bl	8001284 <traffic_run>
	  if(!is_timer_on(2)){
 8002ef4:	e7f0      	b.n	8002ed8 <main+0x94>
 8002ef6:	bf00      	nop
 8002ef8:	080057ec 	.word	0x080057ec

08002efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b094      	sub	sp, #80	; 0x50
 8002f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f02:	f107 0320 	add.w	r3, r7, #32
 8002f06:	2230      	movs	r2, #48	; 0x30
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 fc4c 	bl	80057a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f10:	f107 030c 	add.w	r3, r7, #12
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <SystemClock_Config+0xcc>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <SystemClock_Config+0xcc>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f30:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <SystemClock_Config+0xcc>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <SystemClock_Config+0xd0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <SystemClock_Config+0xd0>)
 8002f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <SystemClock_Config+0xd0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f60:	2310      	movs	r3, #16
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f64:	2302      	movs	r3, #2
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002f70:	23a8      	movs	r3, #168	; 0xa8
 8002f72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f74:	2302      	movs	r3, #2
 8002f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f78:	2304      	movs	r3, #4
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f7c:	f107 0320 	add.w	r3, r7, #32
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fdab 	bl	8003adc <HAL_RCC_OscConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f8c:	f000 f83c 	bl	8003008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f90:	230f      	movs	r3, #15
 8002f92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f94:	2302      	movs	r3, #2
 8002f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002fa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	2105      	movs	r1, #5
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 f80c 	bl	8003fcc <HAL_RCC_ClockConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002fba:	f000 f825 	bl	8003008 <Error_Handler>
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	3750      	adds	r7, #80	; 0x50
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000

08002fd0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002fd4:	480b      	ldr	r0, [pc, #44]	; (8003004 <system_init+0x34>)
 8002fd6:	f001 fec1 	bl	8004d5c <HAL_TIM_Base_Start_IT>
	set_timer(2, READ_BUTTON_TIME);
 8002fda:	210a      	movs	r1, #10
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f000 f823 	bl	8003028 <set_timer>
	set_timer(1, ONE_SECOND);
 8002fe2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f000 f81e 	bl	8003028 <set_timer>
	button_init();
 8002fec:	f7fd fe56 	bl	8000c9c <button_init>
	lcd_init();
 8002ff0:	f7fe ffc2 	bl	8001f78 <lcd_init>
	lcd_Clear(WHITE);
 8002ff4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ff8:	f7fe fcf6 	bl	80019e8 <lcd_Clear>
	init_traffic_light();
 8002ffc:	f7ff fb6c 	bl	80026d8 <init_traffic_light>
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000244 	.word	0x20000244

08003008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800300c:	b672      	cpsid	i
}
 800300e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003010:	e7fe      	b.n	8003010 <Error_Handler+0x8>

08003012 <HAL_TIM_PeriodElapsedCallback>:
 * timer[2]: to read button
 * timer[3]: to toggle led
 * timer[4]: to increase value by 1 over time
 * */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
	run_timer();
 800301a:	f000 f831 	bl	8003080 <run_timer>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <set_timer>:
 * @brief:	turn timer on and set value
 * @para:	i: id of timer
 * 			time: unit is ms
 * @retval:	none
 * */
void set_timer(unsigned i, unsigned int time) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fa05 	bl	800044c <__aeabi_ui2d>
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <set_timer+0x50>)
 8003048:	f7fd fba4 	bl	8000794 <__aeabi_ddiv>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	f7fd fc86 	bl	8000964 <__aeabi_d2uiz>
 8003058:	4602      	mov	r2, r0
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <set_timer+0x54>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 8003064:	4a05      	ldr	r2, [pc, #20]	; (800307c <set_timer+0x54>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2101      	movs	r1, #1
 800306a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	408f4000 	.word	0x408f4000
 800307c:	200001c4 	.word	0x200001c4

08003080 <run_timer>:
/*
 * @brief:	run all timers that is on
 * @para:	none
 * @retval:	none
 * */
void run_timer(void) {
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	e01f      	b.n	80030cc <run_timer+0x4c>
		if (timer[i].state) {
 800308c:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <run_timer+0x60>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <run_timer+0x46>
			timer[i].count--;
 8003098:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <run_timer+0x60>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <run_timer+0x60>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0) {
 80030ae:	4a0c      	ldr	r2, [pc, #48]	; (80030e0 <run_timer+0x60>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <run_timer+0x46>
				timer[i].state = 0;
 80030bc:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <run_timer+0x60>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2100      	movs	r1, #0
 80030c2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3301      	adds	r3, #1
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d9dc      	bls.n	800308c <run_timer+0xc>
			}
		}
	}
}
 80030d2:	bf00      	nop
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	200001c4 	.word	0x200001c4

080030e4 <is_timer_on>:
bool is_timer_on(unsigned i) {
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <is_timer_on+0x28>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	200001c4 	.word	0x200001c4

08003110 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <MX_SPI1_Init+0x64>)
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <MX_SPI1_Init+0x68>)
 8003118:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <MX_SPI1_Init+0x64>)
 800311c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003120:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <MX_SPI1_Init+0x64>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003128:	4b12      	ldr	r3, [pc, #72]	; (8003174 <MX_SPI1_Init+0x64>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <MX_SPI1_Init+0x64>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <MX_SPI1_Init+0x64>)
 8003136:	2200      	movs	r2, #0
 8003138:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <MX_SPI1_Init+0x64>)
 800313c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003140:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <MX_SPI1_Init+0x64>)
 8003144:	2200      	movs	r2, #0
 8003146:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <MX_SPI1_Init+0x64>)
 800314a:	2200      	movs	r2, #0
 800314c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <MX_SPI1_Init+0x64>)
 8003150:	2200      	movs	r2, #0
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <MX_SPI1_Init+0x64>)
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <MX_SPI1_Init+0x64>)
 800315c:	220a      	movs	r2, #10
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003160:	4804      	ldr	r0, [pc, #16]	; (8003174 <MX_SPI1_Init+0x64>)
 8003162:	f001 f8fb 	bl	800435c <HAL_SPI_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800316c:	f7ff ff4c 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200001ec 	.word	0x200001ec
 8003178:	40013000 	.word	0x40013000

0800317c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_SPI_MspInit+0x84>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d12b      	bne.n	80031f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_SPI_MspInit+0x88>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <HAL_SPI_MspInit+0x88>)
 80031a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_SPI_MspInit+0x88>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_SPI_MspInit+0x88>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_SPI_MspInit+0x88>)
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <HAL_SPI_MspInit+0x88>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80031d6:	2338      	movs	r3, #56	; 0x38
 80031d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031e6:	2305      	movs	r3, #5
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	4619      	mov	r1, r3
 80031f0:	4805      	ldr	r0, [pc, #20]	; (8003208 <HAL_SPI_MspInit+0x8c>)
 80031f2:	f000 fabd 	bl	8003770 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80031f6:	bf00      	nop
 80031f8:	3728      	adds	r7, #40	; 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40013000 	.word	0x40013000
 8003204:	40023800 	.word	0x40023800
 8003208:	40020400 	.word	0x40020400

0800320c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_MspInit+0x4c>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <HAL_MspInit+0x4c>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6453      	str	r3, [r2, #68]	; 0x44
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_MspInit+0x4c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_MspInit+0x4c>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <HAL_MspInit+0x4c>)
 8003238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_MspInit+0x4c>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <NMI_Handler+0x4>

08003262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <HardFault_Handler+0x4>

08003268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <MemManage_Handler+0x4>

0800326e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003272:	e7fe      	b.n	8003272 <BusFault_Handler+0x4>

08003274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <UsageFault_Handler+0x4>

0800327a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a8:	f000 f90c 	bl	80034c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <TIM2_IRQHandler+0x10>)
 80032b6:	f001 fdc1 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000244 	.word	0x20000244

080032c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <SystemInit+0x20>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <SystemInit+0x20>)
 80032d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fc:	463b      	mov	r3, r7
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <MX_TIM2_Init+0x94>)
 8003306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800330a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <MX_TIM2_Init+0x94>)
 800330e:	f240 3247 	movw	r2, #839	; 0x347
 8003312:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <MX_TIM2_Init+0x94>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800331a:	4b18      	ldr	r3, [pc, #96]	; (800337c <MX_TIM2_Init+0x94>)
 800331c:	2263      	movs	r2, #99	; 0x63
 800331e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <MX_TIM2_Init+0x94>)
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <MX_TIM2_Init+0x94>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800332c:	4813      	ldr	r0, [pc, #76]	; (800337c <MX_TIM2_Init+0x94>)
 800332e:	f001 fcc5 	bl	8004cbc <HAL_TIM_Base_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003338:	f7ff fe66 	bl	8003008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800333c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003342:	f107 0308 	add.w	r3, r7, #8
 8003346:	4619      	mov	r1, r3
 8003348:	480c      	ldr	r0, [pc, #48]	; (800337c <MX_TIM2_Init+0x94>)
 800334a:	f001 fe7f 	bl	800504c <HAL_TIM_ConfigClockSource>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003354:	f7ff fe58 	bl	8003008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003358:	2300      	movs	r3, #0
 800335a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003360:	463b      	mov	r3, r7
 8003362:	4619      	mov	r1, r3
 8003364:	4805      	ldr	r0, [pc, #20]	; (800337c <MX_TIM2_Init+0x94>)
 8003366:	f002 f89b 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003370:	f7ff fe4a 	bl	8003008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003374:	bf00      	nop
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000244 	.word	0x20000244

08003380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d115      	bne.n	80033be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_TIM_Base_MspInit+0x48>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_TIM_Base_MspInit+0x48>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_TIM_Base_MspInit+0x48>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2100      	movs	r1, #0
 80033b2:	201c      	movs	r0, #28
 80033b4:	f000 f9a5 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033b8:	201c      	movs	r0, #28
 80033ba:	f000 f9be 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800

080033cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033d0:	480d      	ldr	r0, [pc, #52]	; (8003408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033d2:	490e      	ldr	r1, [pc, #56]	; (800340c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033d4:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033d8:	e002      	b.n	80033e0 <LoopCopyDataInit>

080033da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033de:	3304      	adds	r3, #4

080033e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e4:	d3f9      	bcc.n	80033da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033e6:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033e8:	4c0b      	ldr	r4, [pc, #44]	; (8003418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033ec:	e001      	b.n	80033f2 <LoopFillZerobss>

080033ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f0:	3204      	adds	r2, #4

080033f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f4:	d3fb      	bcc.n	80033ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033f6:	f7ff ff65 	bl	80032c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033fa:	f002 f9b1 	bl	8005760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033fe:	f7ff fd21 	bl	8002e44 <main>
  bx  lr    
 8003402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800340c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8003410:	0800879c 	.word	0x0800879c
  ldr r2, =_sbss
 8003414:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8003418:	20000290 	.word	0x20000290

0800341c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800341c:	e7fe      	b.n	800341c <ADC_IRQHandler>
	...

08003420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_Init+0x40>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_Init+0x40>)
 800342a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_Init+0x40>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <HAL_Init+0x40>)
 8003436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_Init+0x40>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_Init+0x40>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003448:	2003      	movs	r0, #3
 800344a:	f000 f94f 	bl	80036ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800344e:	200f      	movs	r0, #15
 8003450:	f000 f808 	bl	8003464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003454:	f7ff feda 	bl	800320c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023c00 	.word	0x40023c00

08003464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_InitTick+0x54>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_InitTick+0x58>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	4619      	mov	r1, r3
 8003476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800347a:	fbb3 f3f1 	udiv	r3, r3, r1
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f967 	bl	8003756 <HAL_SYSTICK_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e00e      	b.n	80034b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b0f      	cmp	r3, #15
 8003496:	d80a      	bhi.n	80034ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003498:	2200      	movs	r2, #0
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f000 f92f 	bl	8003702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034a4:	4a06      	ldr	r2, [pc, #24]	; (80034c0 <HAL_InitTick+0x5c>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000024 	.word	0x20000024
 80034bc:	2000002c 	.word	0x2000002c
 80034c0:	20000028 	.word	0x20000028

080034c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_IncTick+0x20>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_IncTick+0x24>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_IncTick+0x24>)
 80034d6:	6013      	str	r3, [r2, #0]
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000002c 	.word	0x2000002c
 80034e8:	2000028c 	.word	0x2000028c

080034ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return uwTick;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <HAL_GetTick+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	2000028c 	.word	0x2000028c

08003504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7ff ffee 	bl	80034ec <HAL_GetTick>
 8003510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d005      	beq.n	800352a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_Delay+0x44>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800352a:	bf00      	nop
 800352c:	f7ff ffde 	bl	80034ec <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d8f7      	bhi.n	800352c <HAL_Delay+0x28>
  {
  }
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	2000002c 	.word	0x2000002c

0800354c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003568:	4013      	ands	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357e:	4a04      	ldr	r2, [pc, #16]	; (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	60d3      	str	r3, [r2, #12]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <__NVIC_GetPriorityGrouping+0x18>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0307 	and.w	r3, r3, #7
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db0b      	blt.n	80035da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f003 021f 	and.w	r2, r3, #31
 80035c8:	4907      	ldr	r1, [pc, #28]	; (80035e8 <__NVIC_EnableIRQ+0x38>)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2001      	movs	r0, #1
 80035d2:	fa00 f202 	lsl.w	r2, r0, r2
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e000e100 	.word	0xe000e100

080035ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	db0a      	blt.n	8003616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	490c      	ldr	r1, [pc, #48]	; (8003638 <__NVIC_SetPriority+0x4c>)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	0112      	lsls	r2, r2, #4
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	440b      	add	r3, r1
 8003610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003614:	e00a      	b.n	800362c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4908      	ldr	r1, [pc, #32]	; (800363c <__NVIC_SetPriority+0x50>)
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3b04      	subs	r3, #4
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	440b      	add	r3, r1
 800362a:	761a      	strb	r2, [r3, #24]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000e100 	.word	0xe000e100
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f1c3 0307 	rsb	r3, r3, #7
 800365a:	2b04      	cmp	r3, #4
 800365c:	bf28      	it	cs
 800365e:	2304      	movcs	r3, #4
 8003660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3304      	adds	r3, #4
 8003666:	2b06      	cmp	r3, #6
 8003668:	d902      	bls.n	8003670 <NVIC_EncodePriority+0x30>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3b03      	subs	r3, #3
 800366e:	e000      	b.n	8003672 <NVIC_EncodePriority+0x32>
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	401a      	ands	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	43d9      	mvns	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	4313      	orrs	r3, r2
         );
}
 800369a:	4618      	mov	r0, r3
 800369c:	3724      	adds	r7, #36	; 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b8:	d301      	bcc.n	80036be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <SysTick_Config+0x40>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c6:	210f      	movs	r1, #15
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f7ff ff8e 	bl	80035ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <SysTick_Config+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <SysTick_Config+0x40>)
 80036d8:	2207      	movs	r2, #7
 80036da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff29 	bl	800354c <__NVIC_SetPriorityGrouping>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003714:	f7ff ff3e 	bl	8003594 <__NVIC_GetPriorityGrouping>
 8003718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7ff ff8e 	bl	8003640 <NVIC_EncodePriority>
 8003724:	4602      	mov	r2, r0
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff5d 	bl	80035ec <__NVIC_SetPriority>
}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff31 	bl	80035b0 <__NVIC_EnableIRQ>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ffa2 	bl	80036a8 <SysTick_Config>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	e16b      	b.n	8003a64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800378c:	2201      	movs	r2, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	f040 815a 	bne.w	8003a5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d005      	beq.n	80037c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d130      	bne.n	8003824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037f8:	2201      	movs	r2, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 0201 	and.w	r2, r3, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b03      	cmp	r3, #3
 800382e:	d017      	beq.n	8003860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d123      	bne.n	80038b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	08da      	lsrs	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3208      	adds	r2, #8
 8003874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	220f      	movs	r2, #15
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	08da      	lsrs	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3208      	adds	r2, #8
 80038ae:	69b9      	ldr	r1, [r7, #24]
 80038b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	2203      	movs	r2, #3
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0203 	and.w	r2, r3, #3
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80b4 	beq.w	8003a5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b60      	ldr	r3, [pc, #384]	; (8003a7c <HAL_GPIO_Init+0x30c>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	4a5f      	ldr	r2, [pc, #380]	; (8003a7c <HAL_GPIO_Init+0x30c>)
 8003900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003904:	6453      	str	r3, [r2, #68]	; 0x44
 8003906:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <HAL_GPIO_Init+0x30c>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003912:	4a5b      	ldr	r2, [pc, #364]	; (8003a80 <HAL_GPIO_Init+0x310>)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	3302      	adds	r3, #2
 800391a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	220f      	movs	r2, #15
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_GPIO_Init+0x314>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d02b      	beq.n	8003996 <HAL_GPIO_Init+0x226>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a51      	ldr	r2, [pc, #324]	; (8003a88 <HAL_GPIO_Init+0x318>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d025      	beq.n	8003992 <HAL_GPIO_Init+0x222>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a50      	ldr	r2, [pc, #320]	; (8003a8c <HAL_GPIO_Init+0x31c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01f      	beq.n	800398e <HAL_GPIO_Init+0x21e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4f      	ldr	r2, [pc, #316]	; (8003a90 <HAL_GPIO_Init+0x320>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d019      	beq.n	800398a <HAL_GPIO_Init+0x21a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a4e      	ldr	r2, [pc, #312]	; (8003a94 <HAL_GPIO_Init+0x324>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_GPIO_Init+0x216>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4d      	ldr	r2, [pc, #308]	; (8003a98 <HAL_GPIO_Init+0x328>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00d      	beq.n	8003982 <HAL_GPIO_Init+0x212>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a4c      	ldr	r2, [pc, #304]	; (8003a9c <HAL_GPIO_Init+0x32c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <HAL_GPIO_Init+0x20e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a4b      	ldr	r2, [pc, #300]	; (8003aa0 <HAL_GPIO_Init+0x330>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d101      	bne.n	800397a <HAL_GPIO_Init+0x20a>
 8003976:	2307      	movs	r3, #7
 8003978:	e00e      	b.n	8003998 <HAL_GPIO_Init+0x228>
 800397a:	2308      	movs	r3, #8
 800397c:	e00c      	b.n	8003998 <HAL_GPIO_Init+0x228>
 800397e:	2306      	movs	r3, #6
 8003980:	e00a      	b.n	8003998 <HAL_GPIO_Init+0x228>
 8003982:	2305      	movs	r3, #5
 8003984:	e008      	b.n	8003998 <HAL_GPIO_Init+0x228>
 8003986:	2304      	movs	r3, #4
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x228>
 800398a:	2303      	movs	r3, #3
 800398c:	e004      	b.n	8003998 <HAL_GPIO_Init+0x228>
 800398e:	2302      	movs	r3, #2
 8003990:	e002      	b.n	8003998 <HAL_GPIO_Init+0x228>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_GPIO_Init+0x228>
 8003996:	2300      	movs	r3, #0
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	f002 0203 	and.w	r2, r2, #3
 800399e:	0092      	lsls	r2, r2, #2
 80039a0:	4093      	lsls	r3, r2
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039a8:	4935      	ldr	r1, [pc, #212]	; (8003a80 <HAL_GPIO_Init+0x310>)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b6:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_GPIO_Init+0x334>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039da:	4a32      	ldr	r2, [pc, #200]	; (8003aa4 <HAL_GPIO_Init+0x334>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039e0:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <HAL_GPIO_Init+0x334>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <HAL_GPIO_Init+0x334>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <HAL_GPIO_Init+0x334>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_GPIO_Init+0x334>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_GPIO_Init+0x334>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_GPIO_Init+0x334>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3301      	adds	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b0f      	cmp	r3, #15
 8003a68:	f67f ae90 	bls.w	800378c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3724      	adds	r7, #36	; 0x24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40020000 	.word	0x40020000
 8003a88:	40020400 	.word	0x40020400
 8003a8c:	40020800 	.word	0x40020800
 8003a90:	40020c00 	.word	0x40020c00
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40021400 	.word	0x40021400
 8003a9c:	40021800 	.word	0x40021800
 8003aa0:	40021c00 	.word	0x40021c00
 8003aa4:	40013c00 	.word	0x40013c00

08003aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab8:	787b      	ldrb	r3, [r7, #1]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac4:	e003      	b.n	8003ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	041a      	lsls	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	619a      	str	r2, [r3, #24]
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e264      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d075      	beq.n	8003be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003afa:	4ba3      	ldr	r3, [pc, #652]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d00c      	beq.n	8003b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b06:	4ba0      	ldr	r3, [pc, #640]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d112      	bne.n	8003b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b12:	4b9d      	ldr	r3, [pc, #628]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1e:	d10b      	bne.n	8003b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	4b99      	ldr	r3, [pc, #612]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d05b      	beq.n	8003be4 <HAL_RCC_OscConfig+0x108>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d157      	bne.n	8003be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e23f      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b40:	d106      	bne.n	8003b50 <HAL_RCC_OscConfig+0x74>
 8003b42:	4b91      	ldr	r3, [pc, #580]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a90      	ldr	r2, [pc, #576]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e01d      	b.n	8003b8c <HAL_RCC_OscConfig+0xb0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x98>
 8003b5a:	4b8b      	ldr	r3, [pc, #556]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a8a      	ldr	r2, [pc, #552]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b88      	ldr	r3, [pc, #544]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a87      	ldr	r2, [pc, #540]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0xb0>
 8003b74:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a83      	ldr	r2, [pc, #524]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4b81      	ldr	r3, [pc, #516]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a80      	ldr	r2, [pc, #512]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7ff fcaa 	bl	80034ec <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7ff fca6 	bl	80034ec <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e204      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0xc0>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7ff fc96 	bl	80034ec <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7ff fc92 	bl	80034ec <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1f0      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0xe8>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d063      	beq.n	8003cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bf2:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfe:	4b62      	ldr	r3, [pc, #392]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d11c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0a:	4b5f      	ldr	r3, [pc, #380]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d116      	bne.n	8003c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_RCC_OscConfig+0x152>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e1c4      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b56      	ldr	r3, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4952      	ldr	r1, [pc, #328]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c42:	e03a      	b.n	8003cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c4c:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <HAL_RCC_OscConfig+0x2b0>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7ff fc4b 	bl	80034ec <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c5a:	f7ff fc47 	bl	80034ec <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e1a5      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c78:	4b43      	ldr	r3, [pc, #268]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4940      	ldr	r1, [pc, #256]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]
 8003c8c:	e015      	b.n	8003cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8e:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <HAL_RCC_OscConfig+0x2b0>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7ff fc2a 	bl	80034ec <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7ff fc26 	bl	80034ec <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e184      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d030      	beq.n	8003d28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d016      	beq.n	8003cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cce:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <HAL_RCC_OscConfig+0x2b4>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7ff fc0a 	bl	80034ec <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7ff fc06 	bl	80034ec <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e164      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x200>
 8003cfa:	e015      	b.n	8003d28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCC_OscConfig+0x2b4>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d02:	f7ff fbf3 	bl	80034ec <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d0a:	f7ff fbef 	bl	80034ec <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e14d      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a0 	beq.w	8003e76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_OscConfig+0x2b8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d121      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_RCC_OscConfig+0x2b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <HAL_RCC_OscConfig+0x2b8>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7e:	f7ff fbb5 	bl	80034ec <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	e011      	b.n	8003daa <HAL_RCC_OscConfig+0x2ce>
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	42470000 	.word	0x42470000
 8003d90:	42470e80 	.word	0x42470e80
 8003d94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d98:	f7ff fba8 	bl	80034ec <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e106      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	4b85      	ldr	r3, [pc, #532]	; (8003fc0 <HAL_RCC_OscConfig+0x4e4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d106      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2f0>
 8003dbe:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a80      	ldr	r2, [pc, #512]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dca:	e01c      	b.n	8003e06 <HAL_RCC_OscConfig+0x32a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCC_OscConfig+0x312>
 8003dd4:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a7a      	ldr	r2, [pc, #488]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a77      	ldr	r2, [pc, #476]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	e00b      	b.n	8003e06 <HAL_RCC_OscConfig+0x32a>
 8003dee:	4b75      	ldr	r3, [pc, #468]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a74      	ldr	r2, [pc, #464]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a71      	ldr	r2, [pc, #452]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d015      	beq.n	8003e3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7ff fb6d 	bl	80034ec <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7ff fb69 	bl	80034ec <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0c5      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ee      	beq.n	8003e16 <HAL_RCC_OscConfig+0x33a>
 8003e38:	e014      	b.n	8003e64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3a:	f7ff fb57 	bl	80034ec <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7ff fb53 	bl	80034ec <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0af      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e58:	4b5a      	ldr	r3, [pc, #360]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ee      	bne.n	8003e42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4b56      	ldr	r3, [pc, #344]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	4a55      	ldr	r2, [pc, #340]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 809b 	beq.w	8003fb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e80:	4b50      	ldr	r3, [pc, #320]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d05c      	beq.n	8003f46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d141      	bne.n	8003f18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e94:	4b4c      	ldr	r3, [pc, #304]	; (8003fc8 <HAL_RCC_OscConfig+0x4ec>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7ff fb27 	bl	80034ec <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7ff fb23 	bl	80034ec <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e081      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f0      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	019b      	lsls	r3, r3, #6
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	041b      	lsls	r3, r3, #16
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	061b      	lsls	r3, r3, #24
 8003ee4:	4937      	ldr	r1, [pc, #220]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eea:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <HAL_RCC_OscConfig+0x4ec>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7ff fafc 	bl	80034ec <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7ff faf8 	bl	80034ec <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e056      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x41c>
 8003f16:	e04e      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f18:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <HAL_RCC_OscConfig+0x4ec>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7ff fae5 	bl	80034ec <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f26:	f7ff fae1 	bl	80034ec <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e03f      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x44a>
 8003f44:	e037      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e032      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f52:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <HAL_RCC_OscConfig+0x4e8>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d028      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d121      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d11a      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f82:	4013      	ands	r3, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d111      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40007000 	.word	0x40007000
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	42470060 	.word	0x42470060

08003fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0cc      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b68      	ldr	r3, [pc, #416]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d90c      	bls.n	8004008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0b8      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004020:	4b59      	ldr	r3, [pc, #356]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a58      	ldr	r2, [pc, #352]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800402a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004038:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a52      	ldr	r2, [pc, #328]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004044:	4b50      	ldr	r3, [pc, #320]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	494d      	ldr	r1, [pc, #308]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d044      	beq.n	80040ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d119      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e07f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d003      	beq.n	800408a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004086:	2b03      	cmp	r3, #3
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	4b3f      	ldr	r3, [pc, #252]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e06f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e067      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040aa:	4b37      	ldr	r3, [pc, #220]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4934      	ldr	r1, [pc, #208]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040bc:	f7ff fa16 	bl	80034ec <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	e00a      	b.n	80040da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c4:	f7ff fa12 	bl	80034ec <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e04f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 020c 	and.w	r2, r3, #12
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1eb      	bne.n	80040c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d20c      	bcs.n	8004114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e032      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4916      	ldr	r1, [pc, #88]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	490e      	ldr	r1, [pc, #56]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004152:	f000 f821 	bl	8004198 <HAL_RCC_GetSysClockFreq>
 8004156:	4602      	mov	r2, r0
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	490a      	ldr	r1, [pc, #40]	; (800418c <HAL_RCC_ClockConfig+0x1c0>)
 8004164:	5ccb      	ldrb	r3, [r1, r3]
 8004166:	fa22 f303 	lsr.w	r3, r2, r3
 800416a:	4a09      	ldr	r2, [pc, #36]	; (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff f976 	bl	8003464 <HAL_InitTick>

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023c00 	.word	0x40023c00
 8004188:	40023800 	.word	0x40023800
 800418c:	0800877c 	.word	0x0800877c
 8004190:	20000024 	.word	0x20000024
 8004194:	20000028 	.word	0x20000028

08004198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	607b      	str	r3, [r7, #4]
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	2300      	movs	r3, #0
 80041aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b0:	4b67      	ldr	r3, [pc, #412]	; (8004350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d00d      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x40>
 80041bc:	2b08      	cmp	r3, #8
 80041be:	f200 80bd 	bhi.w	800433c <HAL_RCC_GetSysClockFreq+0x1a4>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x34>
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d003      	beq.n	80041d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ca:	e0b7      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041cc:	4b61      	ldr	r3, [pc, #388]	; (8004354 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041ce:	60bb      	str	r3, [r7, #8]
       break;
 80041d0:	e0b7      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041d2:	4b61      	ldr	r3, [pc, #388]	; (8004358 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041d4:	60bb      	str	r3, [r7, #8]
      break;
 80041d6:	e0b4      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d8:	4b5d      	ldr	r3, [pc, #372]	; (8004350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041e2:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04d      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ee:	4b58      	ldr	r3, [pc, #352]	; (8004350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	461a      	mov	r2, r3
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	ea02 0800 	and.w	r8, r2, r0
 8004206:	ea03 0901 	and.w	r9, r3, r1
 800420a:	4640      	mov	r0, r8
 800420c:	4649      	mov	r1, r9
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	014b      	lsls	r3, r1, #5
 8004218:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800421c:	0142      	lsls	r2, r0, #5
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	ebb0 0008 	subs.w	r0, r0, r8
 8004226:	eb61 0109 	sbc.w	r1, r1, r9
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	018b      	lsls	r3, r1, #6
 8004234:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004238:	0182      	lsls	r2, r0, #6
 800423a:	1a12      	subs	r2, r2, r0
 800423c:	eb63 0301 	sbc.w	r3, r3, r1
 8004240:	f04f 0000 	mov.w	r0, #0
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	00d9      	lsls	r1, r3, #3
 800424a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800424e:	00d0      	lsls	r0, r2, #3
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	eb12 0208 	adds.w	r2, r2, r8
 8004258:	eb43 0309 	adc.w	r3, r3, r9
 800425c:	f04f 0000 	mov.w	r0, #0
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	0259      	lsls	r1, r3, #9
 8004266:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800426a:	0250      	lsls	r0, r2, #9
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	f7fc fb92 	bl	80009a4 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4613      	mov	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e04a      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	099b      	lsrs	r3, r3, #6
 8004290:	461a      	mov	r2, r3
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	ea02 0400 	and.w	r4, r2, r0
 80042a2:	ea03 0501 	and.w	r5, r3, r1
 80042a6:	4620      	mov	r0, r4
 80042a8:	4629      	mov	r1, r5
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	014b      	lsls	r3, r1, #5
 80042b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042b8:	0142      	lsls	r2, r0, #5
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	1b00      	subs	r0, r0, r4
 80042c0:	eb61 0105 	sbc.w	r1, r1, r5
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	018b      	lsls	r3, r1, #6
 80042ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042d2:	0182      	lsls	r2, r0, #6
 80042d4:	1a12      	subs	r2, r2, r0
 80042d6:	eb63 0301 	sbc.w	r3, r3, r1
 80042da:	f04f 0000 	mov.w	r0, #0
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	00d9      	lsls	r1, r3, #3
 80042e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e8:	00d0      	lsls	r0, r2, #3
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	1912      	adds	r2, r2, r4
 80042f0:	eb45 0303 	adc.w	r3, r5, r3
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0299      	lsls	r1, r3, #10
 80042fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004302:	0290      	lsls	r0, r2, #10
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	f7fc fb46 	bl	80009a4 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	3301      	adds	r3, #1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	60bb      	str	r3, [r7, #8]
      break;
 800433a:	e002      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800433e:	60bb      	str	r3, [r7, #8]
      break;
 8004340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004342:	68bb      	ldr	r3, [r7, #8]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	00f42400 	.word	0x00f42400
 8004358:	007a1200 	.word	0x007a1200

0800435c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07b      	b.n	8004466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800437e:	d009      	beq.n	8004394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	61da      	str	r2, [r3, #28]
 8004386:	e005      	b.n	8004394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe fee4 	bl	800317c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	ea42 0103 	orr.w	r1, r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	f003 0104 	and.w	r1, r3, #4
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	f003 0210 	and.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b088      	sub	sp, #32
 8004472:	af02      	add	r7, sp, #8
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800448a:	d112      	bne.n	80044b2 <HAL_SPI_Receive+0x44>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10e      	bne.n	80044b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2204      	movs	r2, #4
 8004498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800449c:	88fa      	ldrh	r2, [r7, #6]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f8f1 	bl	8004690 <HAL_SPI_TransmitReceive>
 80044ae:	4603      	mov	r3, r0
 80044b0:	e0ea      	b.n	8004688 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_SPI_Receive+0x52>
 80044bc:	2302      	movs	r3, #2
 80044be:	e0e3      	b.n	8004688 <HAL_SPI_Receive+0x21a>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c8:	f7ff f810 	bl	80034ec <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044de:	e0ca      	b.n	8004676 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_Receive+0x7e>
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044f0:	e0c1      	b.n	8004676 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2204      	movs	r2, #4
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004538:	d10f      	bne.n	800455a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004548:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004558:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d007      	beq.n	8004578 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d162      	bne.n	8004646 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004580:	e02e      	b.n	80045e0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d115      	bne.n	80045bc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f103 020c 	add.w	r2, r3, #12
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	7812      	ldrb	r2, [r2, #0]
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045ba:	e011      	b.n	80045e0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045bc:	f7fe ff96 	bl	80034ec <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d803      	bhi.n	80045d4 <HAL_SPI_Receive+0x166>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d102      	bne.n	80045da <HAL_SPI_Receive+0x16c>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045de:	e04a      	b.n	8004676 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1cb      	bne.n	8004582 <HAL_SPI_Receive+0x114>
 80045ea:	e031      	b.n	8004650 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d113      	bne.n	8004622 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	b292      	uxth	r2, r2
 8004606:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	1c9a      	adds	r2, r3, #2
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004620:	e011      	b.n	8004646 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004622:	f7fe ff63 	bl	80034ec <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d803      	bhi.n	800463a <HAL_SPI_Receive+0x1cc>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d102      	bne.n	8004640 <HAL_SPI_Receive+0x1d2>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004644:	e017      	b.n	8004676 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1cd      	bne.n	80045ec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	6839      	ldr	r1, [r7, #0]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fa45 	bl	8004ae4 <SPI_EndRxTransaction>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
 8004672:	e000      	b.n	8004676 <HAL_SPI_Receive+0x208>
  }

error :
 8004674:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800469e:	2301      	movs	r3, #1
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x26>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e18a      	b.n	80049cc <HAL_SPI_TransmitReceive+0x33c>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046be:	f7fe ff15 	bl	80034ec <HAL_GetTick>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d00f      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x70>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e6:	d107      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x68>
 80046f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d003      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046fe:	e15b      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x82>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x82>
 800470c:	887b      	ldrh	r3, [r7, #2]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004718:	e14e      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b04      	cmp	r3, #4
 8004724:	d003      	beq.n	800472e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2205      	movs	r2, #5
 800472a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	887a      	ldrh	r2, [r7, #2]
 800473e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	887a      	ldrh	r2, [r7, #2]
 8004750:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	887a      	ldrh	r2, [r7, #2]
 8004756:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d007      	beq.n	8004782 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478a:	d178      	bne.n	800487e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_SPI_TransmitReceive+0x10a>
 8004794:	8b7b      	ldrh	r3, [r7, #26]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d166      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	881a      	ldrh	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	1c9a      	adds	r2, r3, #2
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047be:	e053      	b.n	8004868 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d11b      	bne.n	8004806 <HAL_SPI_TransmitReceive+0x176>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d016      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x176>
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d113      	bne.n	8004806 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	1c9a      	adds	r2, r3, #2
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d119      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x1b8>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d014      	beq.n	8004848 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	b292      	uxth	r2, r2
 800482a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004844:	2301      	movs	r3, #1
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004848:	f7fe fe50 	bl	80034ec <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004854:	429a      	cmp	r2, r3
 8004856:	d807      	bhi.n	8004868 <HAL_SPI_TransmitReceive+0x1d8>
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d003      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004866:	e0a7      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1a6      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x130>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1a1      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x130>
 800487c:	e07c      	b.n	8004978 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SPI_TransmitReceive+0x1fc>
 8004886:	8b7b      	ldrh	r3, [r7, #26]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d16b      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	7812      	ldrb	r2, [r2, #0]
 8004898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048b2:	e057      	b.n	8004964 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d11c      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x26c>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d017      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x26c>
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d114      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b01      	cmp	r3, #1
 8004908:	d119      	bne.n	800493e <HAL_SPI_TransmitReceive+0x2ae>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d014      	beq.n	800493e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800493a:	2301      	movs	r3, #1
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800493e:	f7fe fdd5 	bl	80034ec <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800494a:	429a      	cmp	r2, r3
 800494c:	d803      	bhi.n	8004956 <HAL_SPI_TransmitReceive+0x2c6>
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d102      	bne.n	800495c <HAL_SPI_TransmitReceive+0x2cc>
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004962:	e029      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1a2      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x224>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d19d      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f917 	bl	8004bb0 <SPI_EndRxTxTransaction>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d006      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004994:	e010      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	e000      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80049b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3730      	adds	r7, #48	; 0x30
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049e4:	f7fe fd82 	bl	80034ec <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049f4:	f7fe fd7a 	bl	80034ec <HAL_GetTick>
 80049f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049fa:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	015b      	lsls	r3, r3, #5
 8004a00:	0d1b      	lsrs	r3, r3, #20
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0a:	e054      	b.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d050      	beq.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a14:	f7fe fd6a 	bl	80034ec <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d902      	bls.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d13d      	bne.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d111      	bne.n	8004a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4c:	d004      	beq.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a56:	d107      	bne.n	8004a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a70:	d10f      	bne.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e017      	b.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d19b      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000024 	.word	0x20000024

08004ae4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af8:	d111      	bne.n	8004b1e <SPI_EndRxTransaction+0x3a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b02:	d004      	beq.n	8004b0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d107      	bne.n	8004b1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b26:	d12a      	bne.n	8004b7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b30:	d012      	beq.n	8004b58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ff49 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d02d      	beq.n	8004ba4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e026      	b.n	8004ba6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2101      	movs	r1, #1
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ff36 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01a      	beq.n	8004ba4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e013      	b.n	8004ba6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2101      	movs	r1, #1
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff ff23 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e000      	b.n	8004ba6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <SPI_EndRxTxTransaction+0x7c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <SPI_EndRxTxTransaction+0x80>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0d5b      	lsrs	r3, r3, #21
 8004bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bda:	d112      	bne.n	8004c02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fef4 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e00f      	b.n	8004c22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d0f2      	beq.n	8004c02 <SPI_EndRxTxTransaction+0x52>
 8004c1c:	e000      	b.n	8004c20 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c1e:	bf00      	nop
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000024 	.word	0x20000024
 8004c30:	165e9f81 	.word	0x165e9f81

08004c34 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e034      	b.n	8004cb4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7fc fd42 	bl	80016e8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f000 fca6 	bl	80055c0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	f000 fcf0 	bl	8005664 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6858      	ldr	r0, [r3, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	f000 fd25 	bl	80056e0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	6892      	ldr	r2, [r2, #8]
 8004c9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	6892      	ldr	r2, [r2, #8]
 8004caa:	f041 0101 	orr.w	r1, r1, #1
 8004cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e041      	b.n	8004d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fe fb4c 	bl	8003380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 fa96 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d001      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e04e      	b.n	8004e12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d022      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9e:	d01d      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <HAL_TIM_Base_Start_IT+0xc8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d018      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <HAL_TIM_Base_Start_IT+0xcc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d013      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x80>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_TIM_Base_Start_IT+0xdc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d111      	bne.n	8004e00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b06      	cmp	r3, #6
 8004dec:	d010      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	e007      	b.n	8004e10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40010400 	.word	0x40010400
 8004e34:	40014000 	.word	0x40014000
 8004e38:	40001800 	.word	0x40001800

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0202 	mvn.w	r2, #2
 8004e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9b5 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f9a7 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f9b8 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f98b 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f97d 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f98e 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0208 	mvn.w	r2, #8
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2204      	movs	r2, #4
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f961 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f953 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f964 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0210 	mvn.w	r2, #16
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f937 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f929 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f93a 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0201 	mvn.w	r2, #1
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fe f829 	bl	8003012 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fae0 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8ff 	bl	8005216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b20      	cmp	r3, #32
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b20      	cmp	r3, #32
 8005032:	d107      	bne.n	8005044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0220 	mvn.w	r2, #32
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 faaa 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIM_ConfigClockSource+0x1c>
 8005064:	2302      	movs	r3, #2
 8005066:	e0b4      	b.n	80051d2 <HAL_TIM_ConfigClockSource+0x186>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a0:	d03e      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0xd4>
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	f200 8087 	bhi.w	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ae:	f000 8086 	beq.w	80051be <HAL_TIM_ConfigClockSource+0x172>
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b6:	d87f      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050b8:	2b70      	cmp	r3, #112	; 0x70
 80050ba:	d01a      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0xa6>
 80050bc:	2b70      	cmp	r3, #112	; 0x70
 80050be:	d87b      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050c0:	2b60      	cmp	r3, #96	; 0x60
 80050c2:	d050      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x11a>
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d877      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050c8:	2b50      	cmp	r3, #80	; 0x50
 80050ca:	d03c      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0xfa>
 80050cc:	2b50      	cmp	r3, #80	; 0x50
 80050ce:	d873      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d058      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x13a>
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d86f      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050d8:	2b30      	cmp	r3, #48	; 0x30
 80050da:	d064      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x15a>
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d86b      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d060      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x15a>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d867      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d05c      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x15a>
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d05a      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x15a>
 80050f0:	e062      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6899      	ldr	r1, [r3, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f000 f9ad 	bl	8005460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005114:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	609a      	str	r2, [r3, #8]
      break;
 800511e:	e04f      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6899      	ldr	r1, [r3, #8]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f000 f996 	bl	8005460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005142:	609a      	str	r2, [r3, #8]
      break;
 8005144:	e03c      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	461a      	mov	r2, r3
 8005154:	f000 f90a 	bl	800536c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2150      	movs	r1, #80	; 0x50
 800515e:	4618      	mov	r0, r3
 8005160:	f000 f963 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8005164:	e02c      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	461a      	mov	r2, r3
 8005174:	f000 f929 	bl	80053ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2160      	movs	r1, #96	; 0x60
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f953 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 8005184:	e01c      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	461a      	mov	r2, r3
 8005194:	f000 f8ea 	bl	800536c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2140      	movs	r1, #64	; 0x40
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f943 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 80051a4:	e00c      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f000 f93a 	bl	800542a <TIM_ITRx_SetConfig>
      break;
 80051b6:	e003      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      break;
 80051bc:	e000      	b.n	80051c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a40      	ldr	r2, [pc, #256]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a3d      	ldr	r2, [pc, #244]	; (8005344 <TIM_Base_SetConfig+0x118>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a3c      	ldr	r2, [pc, #240]	; (8005348 <TIM_Base_SetConfig+0x11c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a3b      	ldr	r2, [pc, #236]	; (800534c <TIM_Base_SetConfig+0x120>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3a      	ldr	r2, [pc, #232]	; (8005350 <TIM_Base_SetConfig+0x124>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2f      	ldr	r2, [pc, #188]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d027      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2c      	ldr	r2, [pc, #176]	; (8005344 <TIM_Base_SetConfig+0x118>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d023      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <TIM_Base_SetConfig+0x11c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	; (800534c <TIM_Base_SetConfig+0x120>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a29      	ldr	r2, [pc, #164]	; (8005350 <TIM_Base_SetConfig+0x124>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d017      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a28      	ldr	r2, [pc, #160]	; (8005354 <TIM_Base_SetConfig+0x128>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a27      	ldr	r2, [pc, #156]	; (8005358 <TIM_Base_SetConfig+0x12c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a26      	ldr	r2, [pc, #152]	; (800535c <TIM_Base_SetConfig+0x130>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <TIM_Base_SetConfig+0x134>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a24      	ldr	r2, [pc, #144]	; (8005364 <TIM_Base_SetConfig+0x138>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a23      	ldr	r2, [pc, #140]	; (8005368 <TIM_Base_SetConfig+0x13c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0xf8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <TIM_Base_SetConfig+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800
 8005360:	40001800 	.word	0x40001800
 8005364:	40001c00 	.word	0x40001c00
 8005368:	40002000 	.word	0x40002000

0800536c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0201 	bic.w	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 030a 	bic.w	r3, r3, #10
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0210 	bic.w	r2, r3, #16
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	f043 0307 	orr.w	r3, r3, #7
 800544c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	431a      	orrs	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e05a      	b.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d01d      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10c      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40010400 	.word	0x40010400
 8005590:	40014000 	.word	0x40014000
 8005594:	40001800 	.word	0x40001800

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4b20      	ldr	r3, [pc, #128]	; (8005660 <FSMC_NORSRAM_Init+0xa0>)
 80055de:	4013      	ands	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80055ea:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80055f0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80055f6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80055fc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005602:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005608:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800560e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005614:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800561a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005620:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005626:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800562c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d103      	bne.n	8005644 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005642:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	fff00080 	.word	0xfff00080

08005664 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005686:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005692:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800569a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80056a2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80056ac:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	3b02      	subs	r3, #2
 80056b4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80056b6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80056bc:	4313      	orrs	r3, r2
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6979      	ldr	r1, [r7, #20]
 80056cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f8:	d122      	bne.n	8005740 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005702:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005708:	4013      	ands	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005716:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800571e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005726:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800572c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800573e:	e005      	b.n	800574c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	cff00000 	.word	0xcff00000

08005760 <__libc_init_array>:
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	4d0d      	ldr	r5, [pc, #52]	; (8005798 <__libc_init_array+0x38>)
 8005764:	4c0d      	ldr	r4, [pc, #52]	; (800579c <__libc_init_array+0x3c>)
 8005766:	1b64      	subs	r4, r4, r5
 8005768:	10a4      	asrs	r4, r4, #2
 800576a:	2600      	movs	r6, #0
 800576c:	42a6      	cmp	r6, r4
 800576e:	d109      	bne.n	8005784 <__libc_init_array+0x24>
 8005770:	4d0b      	ldr	r5, [pc, #44]	; (80057a0 <__libc_init_array+0x40>)
 8005772:	4c0c      	ldr	r4, [pc, #48]	; (80057a4 <__libc_init_array+0x44>)
 8005774:	f000 f820 	bl	80057b8 <_init>
 8005778:	1b64      	subs	r4, r4, r5
 800577a:	10a4      	asrs	r4, r4, #2
 800577c:	2600      	movs	r6, #0
 800577e:	42a6      	cmp	r6, r4
 8005780:	d105      	bne.n	800578e <__libc_init_array+0x2e>
 8005782:	bd70      	pop	{r4, r5, r6, pc}
 8005784:	f855 3b04 	ldr.w	r3, [r5], #4
 8005788:	4798      	blx	r3
 800578a:	3601      	adds	r6, #1
 800578c:	e7ee      	b.n	800576c <__libc_init_array+0xc>
 800578e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005792:	4798      	blx	r3
 8005794:	3601      	adds	r6, #1
 8005796:	e7f2      	b.n	800577e <__libc_init_array+0x1e>
 8005798:	08008794 	.word	0x08008794
 800579c:	08008794 	.word	0x08008794
 80057a0:	08008794 	.word	0x08008794
 80057a4:	08008798 	.word	0x08008798

080057a8 <memset>:
 80057a8:	4402      	add	r2, r0
 80057aa:	4603      	mov	r3, r0
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d100      	bne.n	80057b2 <memset+0xa>
 80057b0:	4770      	bx	lr
 80057b2:	f803 1b01 	strb.w	r1, [r3], #1
 80057b6:	e7f9      	b.n	80057ac <memset+0x4>

080057b8 <_init>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr

080057c4 <_fini>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr
